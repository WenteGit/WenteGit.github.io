{"title":"RabbitMQ","slug":"MQ-RabbitMQ","date":"2023-01-25","updated":"2023-02-23","comments":true,"path":"api/posts/15185.json","excerpt":"<blockquote><p> 关于 RabbitMQ 的知识点积累 </p></blockquote>","cover":"http://xtzl.wentexl.cn/wq.png","covers":["http://xtzl.wentexl.cn/wq.png","http://xtzl.wentexl.cn/emq.png","http://xtzl.wentexl.cn/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E6%9C%BA.png","http://xtzl.wentexl.cn/Topic%E9%80%9A%E9%85%8D%E7%AC%A6%E6%96%B9%E5%BC%8F.png"],"content":"<blockquote>\n<p>关于 RabbitMQ 的知识点积累</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"架构图\"><a href=\"# 架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h1><img src = \"http://xtzl.wentexl.cn/rabbitMQ.png\">\n\n<h1 id=\"工作模式 - 五种\"><a href=\"# 工作模式 - 五种\" class=\"headerlink\" title=\"工作模式 (五种)\"></a> 工作模式(五种)</h1><h2 id=\"Simple 简单模式\"><a href=\"#Simple 简单模式\" class=\"headerlink\" title=\"Simple 简单模式\"></a>Simple 简单模式</h2><blockquote>\n<p>一个生产者，一个队列，一个消费者的模式</p>\n</blockquote>\n<h2 id=\"Work-queues 工作队列模式\"><a href=\"#Work-queues 工作队列模式\" class=\"headerlink\" title=\"Work queues 工作队列模式\"></a>Work queues 工作队列模式</h2><blockquote>\n<p>多个消费端共同处理同一个队列中的消息 <br> 对于任务过重或者任务较多的情况使用,C1 和 C2 的轮询获取的，同一个消息只能被其中一个获取到<br><img src=\"http://xtzl.wentexl.cn/wq.png\"/></p>\n</blockquote>\n<h2 id=\"Pub-Sub- 订阅模式\"><a href=\"#Pub-Sub- 订阅模式\" class=\"headerlink\" title=\"Pub/Sub 订阅模式\"></a>Pub/Sub 订阅模式</h2><img src=\"http://xtzl.wentexl.cn/emq.png\"/>\n\n<h2 id=\"Routing 路由模式\"><a href=\"#Routing 路由模式\" class=\"headerlink\" title=\"Routing 路由模式\"></a>Routing 路由模式</h2><blockquote>\n<p>交换机只将消息发送给指定路由 key 的消息队列中去<br><img src=\"http://xtzl.wentexl.cn/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E6%9C%BA.png\"/></p>\n</blockquote>\n<h2 id=\"Topic 通配符方式\"><a href=\"#Topic 通配符方式\" class=\"headerlink\" title=\"Topic 通配符方式\"></a>Topic 通配符方式</h2><blockquote>\n<p>批量匹配之后将消息发送到对应消息队列中<br><img src=\"http://xtzl.wentexl.cn/Topic%E9%80%9A%E9%85%8D%E7%AC%A6%E6%96%B9%E5%BC%8F.png\"></p>\n</blockquote>\n<ul>\n<li>topic 中 #和 * 的区别<blockquote>\n<p>符号“#”匹配路由键的一个或多个词，符号’<em>‘只匹配路由键的一个词。<br>例如：topic.# 那么这个队列会会接收 topic 开头的消息，topic.</em>.queue 那么这个队列会接收 topic.aaaa.queue 这样格式的消息，不接收能 topic.aaaa.bbbb.queue 这样格式的消息</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"交换机的类型\"><a href=\"# 交换机的类型\" class=\"headerlink\" title=\"交换机的类型\"></a>交换机的类型</h1><blockquote>\n<ul>\n<li>fanoutExchange : 广播交换机，适用于简单模式、订阅模式、工作队列模式</li>\n<li>directExchange : 路由定向交换机，适用于路由模式</li>\n<li>headersExchange: 头交换机，适用于路由模式, 路由交换机的路由是基于路由键，头交换机的路由值基于消息的 header 数据。</li>\n<li>topicExchange  : 主题交换机，适用于通配符模式</li>\n</ul>\n</blockquote>\n<h1 id=\"SpringBoot 集成 RabbitMQ\"><a href=\"#SpringBoot 集成 RabbitMQ\" class=\"headerlink\" title=\"SpringBoot 集成 RabbitMQ\"></a>SpringBoot 集成 RabbitMQ</h1><h2 id=\"导入依赖\"><a href=\"# 导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生产端\"><a href=\"# 生产端\" class=\"headerlink\" title=\"生产端\"></a>生产端</h2><blockquote>\n<ul>\n<li>在配置类中配置交换机、消息队列以及它们的绑定关系</li>\n<li>使用 RabbitTemplate 发送消息, 最重要的三个参数是：交换机名称、路由 key、消息数据</li>\n</ul>\n</blockquote>\n<h3 id=\"定义与绑定\"><a href=\"# 定义与绑定\" class=\"headerlink\" title=\"定义与绑定\"></a>定义与绑定</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">EXCHANGE_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;bootExchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">QUEUE_NAME_ONE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;bootQueueOne&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 一、交换机 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;bootExchange&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Exchange <span class=\"title function_\">rabbitExchange</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// durable 是众多参数之一，是否持久化</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class=\"literal\">true</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 二、队列 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;bootQueueOne&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">bootQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置持久化、设置 ttl：消息队列中的消息最大存活时间是 5s</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> QueueBuilder.durable(QUEUE_NAME_ONE).ttl(<span class=\"number\">5000</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 三、队列和交换机的绑定关系 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Binding <span class=\"title function_\">bindQueueExchange</span><span class=\"params\">(<span class=\"meta\">@Qualifier(QUEUE_NAME_ONE)</span> Queue queue,</span></span><br><span class=\"line\"><span class=\"params\">                                     <span class=\"meta\">@Qualifier(EXCHANGE_NAME)</span> Exchange exchange)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class=\"string\">&quot;boot.#&quot;</span>).noargs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"消费端\"><a href=\"# 消费端\" class=\"headerlink\" title=\"消费端\"></a>消费端</h2><blockquote>\n<ul>\n<li>配置一个 Listener, 使用 @RabbitListener 来自动接收消息并处理，如下代码所示</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里接收了消息会自动确认，即消息的自动签收</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;bootQueueOne&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ListenerQueue</span><span class=\"params\">(Message message)</span>&#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"高级特性\"><a href=\"# 高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性 </h1><h2 id=\"消息的可靠性传递\"><a href=\"# 消息的可靠性传递\" class=\"headerlink\" title=\"消息的可靠性传递\"></a> 消息的可靠性传递</h2><blockquote>\n<p>可靠性：作为消息发送方，希望杜绝任何消息丢失或者投递失败的场景</p>\n</blockquote>\n<h3 id=\"Confirm 确认模式\"><a href=\"#Confirm 确认模式\" class=\"headerlink\" title=\"Confirm 确认模式\"></a>Confirm 确认模式</h3><blockquote>\n<p>producer —&gt; exchange：返回一个 confirmCallback，里面为 true 则成功到达 exchange，为 false 则消息未到达 exchange</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testResponsibility</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// ask 为判断标志位，cause 为消息发送失败的原因</span></span><br><span class=\"line\">    rabbitTemplate.setConfirmCallback(((correlationData, ask, cause) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ask)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; 消息发送成功 &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; 消息发送失败 &quot;</span>);</span><br><span class=\"line\">            System.out.println(cause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;directExchange&quot;</span>,<span class=\"string\">&quot;confirm&quot;</span>,<span class=\"string\">&quot; 消息数据 &quot;</span>);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"return- 退回模式\"><a href=\"#return- 退回模式\" class=\"headerlink\" title=\"return 退回模式\"></a>return 退回模式</h3><blockquote>\n<p>  exchange —&gt; queue： 只有投递失败的时候，才会返回一个 returnCallback, 说明消息未能从 exchange 传递到 queue 中</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testReturn</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果消息从交换机发送到某个队列中失败，则将消息返回给生产者，false 为直接丢弃</span></span><br><span class=\"line\">    rabbitTemplate.setMandatory(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    rabbitTemplate.setReturnCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">RabbitTemplate</span>.ReturnCallback() &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> message 消息对象</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> i 错误码</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> s 错误信息</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> s1 交换机</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> s2 路由键</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">returnedMessage</span><span class=\"params\">(Message message, <span class=\"type\">int</span> i, String s, String s1, String s2)</span> &#123;</span><br><span class=\"line\">            System.out.println(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;directExchange&quot;</span>,<span class=\"string\">&quot;confirm&quot;</span>,<span class=\"string\">&quot; 消息数据 &quot;</span>);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息的签收\"><a href=\"# 消息的签收\" class=\"headerlink\" title=\"消息的签收\"></a>消息的签收</h2><blockquote>\n<ul>\n<li>消息默认在消费端是自动接收</li>\n<li>如果未确认消息，则消息会以 unasked 的状态存在于消息队列中</li>\n</ul>\n</blockquote>\n<h3 id=\"Consumer-ASK 手动签收方式\"><a href=\"#Consumer-ASK 手动签收方式\" class=\"headerlink\" title=\"Consumer ASK 手动签收方式\"></a>Consumer ASK 手动签收方式</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">listener:</span></span><br><span class=\"line\">  <span class=\"attr\">simple:</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置监听器为手动签收</span></span><br><span class=\"line\">    <span class=\"attr\">acknowledge-mode:</span> <span class=\"string\">manual</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现接口、重写方法、使用注解添加进容器，并绑定监听的消息队列</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChannelAwareMessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;directQueueOne&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message, Channel channel)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接收消息的消息投递序号，在某个管道中，每个消息的序号都不同</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">deliveryTag</span> <span class=\"operator\">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收转换消息</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody());</span><br><span class=\"line\">            <span class=\"comment\">// 处理业务逻辑</span></span><br><span class=\"line\">            System.out.println(body);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 手动签收,true 是指：是否接收多条消息</span></span><br><span class=\"line\">            channel.basicAck(deliveryTag,<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拒绝签收,b1 是指消息是否重回 queue 来重新发送给消费端</span></span><br><span class=\"line\">            channel.basicNack(deliveryTag,<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消费端对消息的限流\"><a href=\"# 消费端对消息的限流\" class=\"headerlink\" title=\"消费端对消息的限流\"></a>消费端对消息的限流</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">listener:</span></span><br><span class=\"line\">  <span class=\"attr\">simple:</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置消费端一次最多拉取多少条数据</span></span><br><span class=\"line\">    <span class=\"attr\">prefetch:</span> <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"设置消息的过期时间\"><a href=\"# 设置消息的过期时间\" class=\"headerlink\" title=\"设置消息的过期时间\"></a>设置消息的过期时间</h2><blockquote>\n<ul>\n<li>如果同时设置了消息的过期时间和队列的过期时间，以消息时间短的为准</li>\n<li>队列设置的消息时间到了之后，会移除掉队列中所有的消息</li>\n<li>如果设置了某条消息的过期时间，则必须要等消息到顶端的时候才会判断其是否失效，若失效这个时候才会移除</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造队列的时候设置 TTL</span></span><br><span class=\"line\">QueueBuilder.durable(<span class=\"string\">&quot;directQueueOne&quot;</span>).ttl(<span class=\"number\">5000</span>).build();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单独给某些消息设置 TTL</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title function_\">testMessageTTL</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">MessagePostProcessor</span> <span class=\"variable\">messagePostProcessor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MessagePostProcessor</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Message <span class=\"title function_\">postProcessMessage</span><span class=\"params\">(Message message)</span> <span class=\"keyword\">throws</span> AmqpException &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置过期时间为 5.2s</span></span><br><span class=\"line\">                message.getMessageProperties().setExpiration(<span class=\"string\">&quot;5200&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;directExchange&quot;</span>,<span class=\"string\">&quot;confirm&quot;</span>,<span class=\"string\">&quot; 消息 TTL 测试数据 &quot;</span>,messagePostProcessor);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"死信队列\"><a href=\"# 死信队列\" class=\"headerlink\" title=\"死信队列\"></a>死信队列</h2><blockquote>\n<p>当队列中的消息成为死信之后，可把死信发送给死信交换机，可发送到对应队列中，被对应的死信消费端所消费</p>\n</blockquote>\n<h3 id=\"死信消息的三种情况\"><a href=\"# 死信消息的三种情况\" class=\"headerlink\" title=\"死信消息的三种情况\"></a>死信消息的三种情况</h3><blockquote>\n<ul>\n<li>队列消息长度达到限制</li>\n<li>消费端拒接消费消息: 在手动签收消息的时候，调用了 basicNack 且设 requeue=false</li>\n<li>原队列存在消息过期设置，消息到达超时时间而未被消费</li>\n</ul>\n</blockquote>\n<h3 id=\"代码配置\"><a href=\"# 代码配置\" class=\"headerlink\" title=\"代码配置\"></a>代码配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(&quot;directQueueOne&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Queue <span class=\"title function_\">directQueueOne</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置队列中的数据的 ttl 的和死信交换机和死信路由键</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> QueueBuilder.durable(<span class=\"string\">&quot;directQueueOne&quot;</span>).ttl(<span class=\"number\">5000</span>).deadLetterExchange(<span class=\"string\">&quot;deathExchange&quot;</span>).deadLetterRoutingKey(<span class=\"string\">&quot;death&quot;</span>).build();&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"延迟队列\"><a href=\"# 延迟队列\" class=\"headerlink\" title=\"延迟队列\"></a>延迟队列</h2><blockquote>\n<ul>\n<li>当消息进入队列之后不会立即被消费，只有到达指定的时间之后才会被消费</li>\n<li>可使用 TTL+ 死信队列来实现延迟队列 </li>\n</ul>\n</blockquote>\n","url":"/posts/15185/","min2read":6,"word4post":"1.6k","prev_post":{"title":"MySQL-advanced","url":"/posts/55275/"},"next_post":{"title":"RabbitMQ-Install","url":"/posts/59081/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"架构图\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">架构图</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"工作模式 - 五种\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\"> 工作模式(五种)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Simple 简单模式\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">Simple 简单模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Work-queues 工作队列模式\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">Work queues 工作队列模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Pub-Sub- 订阅模式\" href = \"#\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">Pub&#x2F;Sub 订阅模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Routing 路由模式\" href = \"#\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">Routing 路由模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Topic 通配符方式\" href = \"#\"><span class=\"toc-number\">2.5.</span> <span class=\"toc-text\">Topic 通配符方式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"交换机的类型\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">交换机的类型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"SpringBoot 集成 RabbitMQ\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">SpringBoot 集成 RabbitMQ</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"导入依赖\" href = \"#\"><span class=\"toc-number\">4.1.</span> <span class=\"toc-text\">导入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"生产端\" href = \"#\"><span class=\"toc-number\">4.2.</span> <span class=\"toc-text\">生产端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"定义与绑定\" href = \"#\"><span class=\"toc-number\">4.2.1.</span> <span class=\"toc-text\">定义与绑定</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"消费端\" href = \"#\"><span class=\"toc-number\">4.3.</span> <span class=\"toc-text\">消费端</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"高级特性\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">高级特性 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"消息的可靠性传递\" href = \"#\"><span class=\"toc-number\">5.1.</span> <span class=\"toc-text\"> 消息的可靠性传递</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Confirm 确认模式\" href = \"#\"><span class=\"toc-number\">5.1.1.</span> <span class=\"toc-text\">Confirm 确认模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"return- 退回模式\" href = \"#\"><span class=\"toc-number\">5.1.2.</span> <span class=\"toc-text\">return 退回模式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"消息的签收\" href = \"#\"><span class=\"toc-number\">5.2.</span> <span class=\"toc-text\">消息的签收</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Consumer-ASK 手动签收方式\" href = \"#\"><span class=\"toc-number\">5.2.1.</span> <span class=\"toc-text\">Consumer ASK 手动签收方式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"消费端对消息的限流\" href = \"#\"><span class=\"toc-number\">5.3.</span> <span class=\"toc-text\">消费端对消息的限流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"设置消息的过期时间\" href = \"#\"><span class=\"toc-number\">5.4.</span> <span class=\"toc-text\">设置消息的过期时间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"死信队列\" href = \"#\"><span class=\"toc-number\">5.5.</span> <span class=\"toc-text\">死信队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"死信消息的三种情况\" href = \"#\"><span class=\"toc-number\">5.5.1.</span> <span class=\"toc-text\">死信消息的三种情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"代码配置\" href = \"#\"><span class=\"toc-number\">5.5.2.</span> <span class=\"toc-text\">代码配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"延迟队列\" href = \"#\"><span class=\"toc-number\">5.6.</span> <span class=\"toc-text\">延迟队列</span></a></li></ol></li></ol>","categories":[{"name":"MessageQueue","path":"api/categories/MessageQueue.json","url":"/categories/MessageQueue/"}],"tags":[]}