{"title":"Redis","slug":"TechStack-Redis","date":"2022-08-22","updated":"2023-01-18","comments":true,"path":"api/posts/27273.json","excerpt":"<blockquote><p> 介绍了关于 Redis 的相关内容 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>介绍了关于 Redis 的相关内容</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"依赖引入\"><a href=\"# 依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"yml- 配置\"><a href=\"#yml- 配置\" class=\"headerlink\" title=\"yml 配置\"></a>yml 配置</h1><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用的数据库（0-15），默认为 0</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">    <span class=\"comment\"># 对连接池的相关配置</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"comment\"># 最大连接数(使用负数表示无限制)</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 最大阻塞等待时间(使用负数表示无限制)</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 最大空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 最小空闲连接数</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">120.48</span><span class=\"number\">.77</span><span class=\"number\">.232</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"comment\"># 6s 后连接超时</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"number\">6000</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Jedis 和 Lettuce 的区别\"><a href=\"#Jedis 和 Lettuce 的区别\" class=\"headerlink\" title=\"Jedis 和 Lettuce 的区别\"></a>Jedis 和 Lettuce 的区别</h1><blockquote>\n<ul>\n<li>jedis 和 Lettuce 都是 Redis 的客户端，它们都可以连接 Redis 服务器，但是在 SpringBoot2.0 之后默认都是使用的 Lettuce 这个客户端连接 Redis 服务器。因为当使用 Jedis 客户端连接 Redis 服务器的时候，每个线程都要拿自己创建的 Jedis 实例去连接 Redis 客户端，当有很多个线程的时候，不仅开销大需要反复的创建关闭一个 Jedis 连接，而且也是线程不安全的，一个线程通过 Jedis 实例更改 Redis 服务器中的数据之后会影响另一个线程；</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>但是如果使用 Lettuce 这个客户端连接 Redis 服务器的时候，就不会出现上面的情况，Lettuce 底层使用的是 Netty，当有多个线程都需要连接 Redis 服务器的时候，可以保证只创建一个 Lettuce 连接，使所有的线程共享这一个 Lettuce 连接，这样可以减少创建关闭一个 Lettuce 连接时候的开销；而且这种方式也是线程安全的，不会出现一个线程通过 Lettuce 更改 Redis 服务器中的数据之后而影响另一个线程的情况；</li>\n</ul>\n</blockquote>\n<h1 id=\"缓存注解\"><a href=\"# 缓存注解\" class=\"headerlink\" title=\"缓存注解\"></a>缓存注解 </h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheConfig</span></span><br><span class=\"line\"> 是一个类级别的注解，允许共享缓存的名称。</span><br><span class=\"line\">一个类可能会有多个缓存操作而这些缓存操作可能是重复的，这时候可以使用<span class=\"meta\">@CacheConfig</span>.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<hr>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cacheable</span></span><br><span class=\"line\">* 代表从缓存中查询指定的 key，如果有，从缓存中取，不再执行方法。</span><br><span class=\"line\">* 如果没有则执行方法，并且将方法的返回值和指定的 key 关联起来，放入到缓存中。</span><br><span class=\"line\"></span><br><span class=\"line\">主要参数：</span><br><span class=\"line\">* value : 缓存的名称，在 spring 配置中定义，必须指定至少一个。</span><br><span class=\"line\">* key: 缓存的 key，可以为空，如果指定要按照 spel 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合。</span><br><span class=\"line\">* condition: 缓存的条件，可以为空，使用 spek 编写，返回 <span class=\"literal\">true</span> 或<span class=\"literal\">false</span>, 只有为 <span class=\"literal\">true</span> 使才进行缓存。</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\"><span class=\"meta\">@Cacheable(value=&quot;thisredis&quot;, key=&quot;&#x27;users_&#x27;+#id&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">findUser</span><span class=\"params\">(Integer id)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<hr>\n<p>如果在类上配置了 @CacheConfig, 那么此时 @Cacheable 中的 value 就会取代 @CacheConfig 中 cacheNames。<br>如果在类上配置了 @CacheConfig(cacheNames = “ “), 在该类下的 @Cacheable 中可以不用配置 value。</p>\n<hr>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheEvict</span></span><br><span class=\"line\">标记在方法上，方法执行完毕之后根据条件或 key 删除对应的缓存。</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\"><span class=\"meta\">@CacheEvict(value=&quot;thisredis&quot;,   key=&quot;&#x27;users_&#x27;+#id&quot;,condition=&quot;#id!=1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delUser</span><span class=\"params\">(Integer id)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">主要参数：</span><br><span class=\"line\">allEntries : 布尔类型 表示是否需要清除缓存中的所有元素。</span><br><span class=\"line\">key: 需要删除的缓存的 key</span><br><span class=\"line\"></span><br><span class=\"line\">当我们在更新数据库的数据时，要使用 <span class=\"meta\">@CacheEvict</span>，需要把 redis 的缓存清空，否则查询的数据就是 redis 缓存中的数据，这样就会导致数据库和缓存数据不一致的问题。（页面不能及时的同步更新后的数据）。</span><br><span class=\"line\"></span><br><span class=\"line\"> 加上<span class=\"meta\">@CacehEvict</span> 就会在查询数据时发现数据时最新的，与数据库保持一致。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"模板对象序列化\"><a href=\"# 模板对象序列化\" class=\"headerlink\" title=\"模板对象序列化\"></a>模板对象序列化</h1><blockquote>\n<p>如果不自定义序列化，则调用 redisTemplate.keys(“<em>“)是无法获取到键的 <br> 更无法使用 redisTemplate.keys(prefix+”</em>“)来获取某个前缀下的所有 key 值了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义 Key 为 String 类型 Value 为 Object 类型的 Redis 操作模板</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义 redis 用到的 redisTemplate 对象序列化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean(name = &quot;redisTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"comment\">// key 采用 String 的序列化方式</span></span><br><span class=\"line\">    redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">    <span class=\"comment\">// hash 的 key 也采用 String 的序列化方式</span></span><br><span class=\"line\">    redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","url":"/posts/27273/","min2read":4,"word4post":"1.1k","prev_post":{"title":"JUC","url":"/posts/30559/"},"next_post":{"title":"日常随笔","url":"/posts/10026/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"依赖引入\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">依赖引入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"yml- 配置\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">yml 配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Jedis 和 Lettuce 的区别\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">Jedis 和 Lettuce 的区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"缓存注解\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">缓存注解 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"模板对象序列化\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">模板对象序列化</span></a></li></ol>","categories":[{"name":"TechStack","path":"api/categories/TechStack.json","url":"/categories/TechStack/"}],"tags":[{"name":"Redis","path":"api/tags/Redis.json","url":"/tags/Redis/"}]}