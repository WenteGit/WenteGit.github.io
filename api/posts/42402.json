{"title":"Cloud-summary","slug":"Cloud-Summary","date":"2022-07-22","updated":"2022-07-23","comments":true,"path":"api/posts/42402.json","excerpt":"<blockquote><p> 介绍和总结整个 SpringCloud 的理论体系 </p></blockquote>","cover":"http://xtzl.wentexl.cn/SpringCloud/CAP.png","covers":["http://xtzl.wentexl.cn/SpringCloud/CAP.png"],"content":"<blockquote>\n<p> 介绍和总结整个 SpringCloud 的理论体系 </p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"注册中心的异同点\"><a href=\"# 注册中心的异同点\" class=\"headerlink\" title=\"注册中心的异同点\"></a> 注册中心的异同点 </h1><blockquote>\n<h2 id=\"CAP\"><a href=\"#CAP\" class=\"headerlink\" title=\"CAP\"></a>CAP</h2><hr>\n<p> 解释：<br>C :(强一致性):   对某个指定的客户端来说，读操作保证能够返回最新的写操作结果。<br>A :(可用性):     非故障的节点在合理的时间内返回合理的响应（不是错误和超时的响应 )<br>P :(分区容错性): 当出现网络分区后，系统能够继续“履行职责”。</p>\n<hr>\n<ul>\n<li> 分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。</li>\n<li>CAP 理论关注粒度是数据，而不是整个系统的设计策略 </li>\n<li>AP(Eureka) ; CP(Consul)<br><img src=\"http://xtzl.wentexl.cn/SpringCloud/CAP.png\" alt=\"CAP\"></li>\n</ul>\n</blockquote>\n","url":"/posts/42402/","min2read":"1","word4post":167,"prev_post":{"title":"IDEA_Hotkeys","url":"/posts/10025/"},"next_post":{"title":"Eureka","url":"/posts/57702/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"注册中心的异同点\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\"> 注册中心的异同点 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"CAP\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">CAP</span></a></li></ol></li></ol>","categories":[{"name":"SpringCould","path":"api/categories/SpringCould.json","url":"/categories/SpringCould/"}],"tags":[]}