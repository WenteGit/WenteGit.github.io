{"title":"JavaSE","slug":"JavaSE","date":"2023-01-03","updated":"2024-06-20","comments":true,"path":"api/posts/14085.json","excerpt":"<blockquote><p> 主要介绍了关于 JavaSE 的相关积累和操作 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>主要介绍了关于 JavaSE 的相关积累和操作</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h1><h2 id=\"String-format\"><a href=\"#String-format\" class=\"headerlink\" title=\"String.format\"></a>String.format</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;120.0.0.7&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2022/12/05&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;www.wentexl.cn&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot; 用户[%s], 在[%s], 访问了[%s].&quot;</span>, ip, now, target);</span><br><span class=\"line\">        System.out.println(format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反射与注解\"><a href=\"# 反射与注解\" class=\"headerlink\" title=\"反射与注解\"></a>反射与注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 自定义注解 */</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> testAnnotion &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 使用注解 */</span></span><br><span class=\"line\"><span class=\"meta\">@testAnnotion(&quot;test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@testAnnotion(&quot;testMethod&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello word&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 获取注解 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException &#123;</span><br><span class=\"line\">    Class&lt;?&gt; clazz = TestService.class;</span><br><span class=\"line\">    <span class=\"comment\">// 获取类上面标记的所有注解</span></span><br><span class=\"line\">    System.out.println(Arrays.toString(clazz.getAnnotations()));</span><br><span class=\"line\">    <span class=\"comment\">// 获取类上的 @testAnnotion 注解</span></span><br><span class=\"line\">    System.out.println(clazz.getAnnotation(testAnnotion.class));</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个类上的直接注解信息，如果类上没有直接注解信息，则返回一个空数组</span></span><br><span class=\"line\">    System.out.println(Arrays.toString(clazz.getDeclaredAnnotations()));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取类中某个方法的注解信息</span></span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getMethod(<span class=\"string\">&quot;sayHello&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取方法上所有的注解信息</span></span><br><span class=\"line\">    System.out.println(Arrays.toString(method.getAnnotations()));</span><br><span class=\"line\">    <span class=\"comment\">// 获取方法上 @testAnnotion 的注解</span></span><br><span class=\"line\">    System.out.println(method.getAnnotation(testAnnotion.class));</span><br><span class=\"line\">    <span class=\"comment\">// 获取方法上的注解信息</span></span><br><span class=\"line\">    System.out.println(Arrays.toString(method.getDeclaredAnnotations()));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"八大数据类型\"><a href=\"# 八大数据类型\" class=\"headerlink\" title=\"八大数据类型\"></a>八大数据类型 </h1><h2 id=\"整型 - 四种\"><a href=\"# 整型 - 四种\" class=\"headerlink\" title=\"整型 (四种)\"></a> 整型 (四种)</h2><blockquote>\n<ul>\n<li>int<br>长度为 4 字节 32bit，取值 -2^31 到 2^31-1，变量初始化默认值为 0，包装类 Integer</li>\n</ul>\n<hr>\n<ul>\n<li>long<br>长度为 8 字节 64bit，取值 -2^63 到 2^63-1，变量初始化默认值为 0 或 0L，包装类 Long</li>\n</ul>\n<hr>\n<ul>\n<li>short<br>长度为 2 字节 16bit，取值 -32768 到 32767，变量初始化默认值为 0，包装类 Short</li>\n</ul>\n<hr>\n<ul>\n<li>byte<br>长度为 1 字节 8bit，取值（-128）到（127），变量初始化默认值为 0，包装类 Byte</li>\n</ul>\n</blockquote>\n<h2 id=\"浮点型 - 二种\"><a href=\"# 浮点型 - 二种\" class=\"headerlink\" title=\"浮点型 (二种)\"></a>浮点型 (二种)</h2><blockquote>\n<ul>\n<li>float<br>单精度浮点型，长度为 4 字节 32bit，变量初始化默认值 0.0f，包装类 Float</li>\n</ul>\n<hr>\n<ul>\n<li>double<br>双精度浮点型，长度为 8 字节 64bit，变量初始化默认值 0.0d，包装类 Double</li>\n</ul>\n</blockquote>\n<h2 id=\"字符型 - 一种\"><a href=\"# 字符型 - 一种\" class=\"headerlink\" title=\"字符型 (一种)\"></a>字符型 (一种)</h2><blockquote>\n<ul>\n<li>char<br>占 2 字节 16bit，可以赋值单字符以及整型数值, 变量初始化无默认值，包装类 Character。</li>\n</ul>\n</blockquote>\n<h2 id=\"布尔型 - 一种\"><a href=\"# 布尔型 - 一种\" class=\"headerlink\" title=\"布尔型 (一种)\"></a>布尔型 (一种)</h2><blockquote>\n<ul>\n<li>boolean<br>仅有两个值 true, false，变量初始化默认值 false</li>\n</ul>\n</blockquote>\n<h1 id=\"浅拷贝和深拷贝\"><a href=\"# 浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝 </h1><h2 id=\"浅拷贝\"><a href=\"# 浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a> 浅拷贝</h2><blockquote>\n<ul>\n<li>最简单的浅拷贝：Student s1 = new Student(); Student s2 = s1; </li>\n<li>浅拷贝就是获得拷贝对象的引用, 而不是正真意义上的拷贝一个对象  </li>\n<li>如下代码中的 Student 是 JavaBean 对象，而 School 只是实现了 Cloneable 接口</li>\n<li>实际上这不全是深拷贝，因为原对象中的成员变量若是一个对象引用，则对该成员变量只是浅拷贝而已, 但是 School 本身确实是深拷贝，因为新 School 对象和原 School 对象确实不是同一个对象</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写的 Clone 方法中，如果是 super.clone()，是无法克隆到本对象的成员变量的，这样的话实际上也是一种浅拷贝</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> School <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (School)<span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝\"><a href=\"# 深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><blockquote>\n<p>深拷贝则是拷贝了源对象的所有值，所以即使源对象的值发生变化时，拷贝对象的值也不会改变。深拷贝则是真正意义上的拷贝</p>\n</blockquote>\n<h3 id=\"构造函数深拷贝 -new 关键字\"><a href=\"# 构造函数深拷贝 -new 关键字\" class=\"headerlink\" title=\"构造函数深拷贝 (new 关键字)\"></a> 构造函数深拷贝(new 关键字)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">constructorCopy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span> (<span class=\"string\">&quot; 小李 &quot;</span>,<span class=\"number\">21</span>,<span class=\"string\">&quot; 男 &quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">School</span> <span class=\"variable\">school</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">School</span> (<span class=\"string\">&quot;xx 大学 &quot;</span>,<span class=\"number\">100</span>, student);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 调用构造函数时进行深拷贝</span></span><br><span class=\"line\">  <span class=\"type\">School</span> <span class=\"variable\">copySchool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">School</span> (school.getSchoolName(),school.getStuNums(), <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(student.getName(), student.getAge(),student.getSex()));</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 修改源对象的值</span></span><br><span class=\"line\">  copySchool .getStudent().setSex(<span class=\"string\">&quot; 女 &quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 检查两个对象的值不同</span></span><br><span class=\"line\">  System.out.println(school.hashCode()==school2.hasCode())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重载 Clone- 方法深拷贝\"><a href=\"# 重载 Clone- 方法深拷贝\" class=\"headerlink\" title=\"重载 Clone()方法深拷贝\"></a>重载 Clone()方法深拷贝</h3><blockquote>\n<p>在重写 School 类的 clone()方法时，Student 对象需要调用 stu.clone()重新赋值。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写 Clone 方法里面，需要将被克隆的对象的属性对象也克隆一下</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> School <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">    <span class=\"type\">School</span> <span class=\"variable\">school</span> <span class=\"operator\">=</span> (School) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">    school.stu = (Student) stu.clone();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> school;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Serializable 序列化深拷贝\"><a href=\"#Serializable 序列化深拷贝\" class=\"headerlink\" title=\"Serializable 序列化深拷贝\"></a>Serializable 序列化深拷贝</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Address2 address;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">    <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">bos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">    <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(bos);</span><br><span class=\"line\"></span><br><span class=\"line\">    oos.writeObject(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">    <span class=\"type\">ByteArrayInputStream</span> <span class=\"variable\">bis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class=\"line\">    <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(bis);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ois.readObject();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Address2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Java 类\"><a href=\"#Java 类\" class=\"headerlink\" title=\"Java 类\"></a>Java 类 </h1><h2 id=\"类的初始化顺序\"><a href=\"# 类的初始化顺序\" class=\"headerlink\" title=\"类的初始化顺序\"></a> 类的初始化顺序 </h2><h3 id=\"无父类\"><a href=\"# 无父类\" class=\"headerlink\" title=\"无父类\"></a> 无父类</h3><blockquote>\n<ol>\n<li>静态变量初始化</li>\n<li>静态代码块执行</li>\n<li>成员变量初始化</li>\n<li>普通代码块执行</li>\n<li>构造函数执行</li>\n<li>static main 方法执行</li>\n</ol>\n</blockquote>\n<h3 id=\"有父类\"><a href=\"# 有父类\" class=\"headerlink\" title=\"有父类\"></a>有父类</h3><blockquote>\n<ol>\n<li>父类的静态变量 -&gt; 静态代码块</li>\n<li>子类的静态变量 -&gt; 静态代码块</li>\n<li>父类的普通成员变量 -&gt; 普通代码块 -&gt; 构造函数</li>\n<li>子类的普通成员变量 -&gt; 普通代码块 -&gt; 构造函数</li>\n</ol>\n</blockquote>\n<h1 id=\"Java 关键字\"><a href=\"#Java 关键字\" class=\"headerlink\" title=\"Java 关键字\"></a>Java 关键字</h1><h2 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h2><blockquote>\n<ul>\n<li>含义：static 修饰的变量、方法都是类所有的，该类所对应的所有对象都共享这些变量或方法。</li>\n<li>特点：随着类加载，随着类消失，优先于对象，用类名直接访问</li>\n</ul>\n</blockquote>\n<h2 id=\"finnal\"><a href=\"#finnal\" class=\"headerlink\" title=\"finnal\"></a>finnal</h2><blockquote>\n<ul>\n<li>修饰类：该类不能被继承</li>\n<li>修饰变量：该变量不能被修改且需要初始化</li>\n<li>修饰方法：该方法不能被重写</li>\n</ul>\n</blockquote>\n<h1 id=\"函数式接口\"><a href=\"# 函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h1><h2 id=\"Supplier：无参有返回值\"><a href=\"#Supplier：无参有返回值\" class=\"headerlink\" title=\"Supplier：无参有返回值\"></a>Supplier：无参有返回值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> test(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(test);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">test</span><span class=\"params\">(Supplier&lt;Integer&gt; function)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 执行了主逻辑，需要执行回调方法了 &quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">integer</span> <span class=\"operator\">=</span> function.get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> integer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Consumer：有参无返回值\"><a href=\"#Consumer：有参无返回值\" class=\"headerlink\" title=\"Consumer：有参无返回值\"></a>Consumer：有参无返回值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test(<span class=\"number\">1</span>,param-&gt;&#123;</span><br><span class=\"line\">            System.out.println(param);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> a, Consumer&lt;Integer&gt; function)</span>&#123;</span><br><span class=\"line\">        function.accept(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Function：有参有返回值\"><a href=\"#Function：有参有返回值\" class=\"headerlink\" title=\"Function：有参有返回值\"></a>Function：有参有返回值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> test(<span class=\"number\">1</span>, param -&gt; param + <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(test);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> a,Function&lt;Integer,Integer&gt; function)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> function.apply(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Callale：无参有返回值\"><a href=\"#Callale：无参有返回值\" class=\"headerlink\" title=\"Callale：无参有返回值\"></a>Callale：无参有返回值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> test(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">10</span>));</span><br><span class=\"line\">        System.out.println(test);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">test</span><span class=\"params\">(Callable&lt;Integer&gt; function)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> function.call();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Runable：无参无返回值\"><a href=\"#Runable：无参无返回值\" class=\"headerlink\" title=\"Runable：无参无返回值\"></a>Runable：无参无返回值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Test&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(Runnable function)</span>&#123;</span><br><span class=\"line\">        function.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"序列化与反序列化\"><a href=\"# 序列化与反序列化\" class=\"headerlink\" title=\"序列化与反序列化\"></a>序列化与反序列化 </h1><h2 id=\"结论\"><a href=\"# 结论\" class=\"headerlink\" title=\"结论\"></a> 结论</h2><blockquote>\n<ul>\n<li>将对象序列化到 Redis 中的时候，对象对应的类所在的目录很关键，redis 反序列化需要在这个目录下面去找对应的类</li>\n<li>序列化到 redis 中之后，类可以新增属性，但是不能修改属性，否则反序列化失败</li>\n</ul>\n</blockquote>\n","url":"/posts/14085/","min2read":7,"word4post":"1.6k","prev_post":{"title":"TechStack-SpringMail","url":"/posts/31627/"},"next_post":{"title":"Python","url":"/posts/43687/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Tags\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">Tags</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"String-format\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">String.format</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"反射与注解\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">反射与注解</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"八大数据类型\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">八大数据类型 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"整型 - 四种\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\"> 整型 (四种)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"浮点型 - 二种\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">浮点型 (二种)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"字符型 - 一种\" href = \"#\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">字符型 (一种)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"布尔型 - 一种\" href = \"#\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">布尔型 (一种)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"浅拷贝和深拷贝\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">浅拷贝和深拷贝 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"浅拷贝\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\"> 浅拷贝</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"深拷贝\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\">深拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"构造函数深拷贝 -new 关键字\" href = \"#\"><span class=\"toc-number\">3.2.1.</span> <span class=\"toc-text\"> 构造函数深拷贝(new 关键字)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"重载 Clone- 方法深拷贝\" href = \"#\"><span class=\"toc-number\">3.2.2.</span> <span class=\"toc-text\">重载 Clone()方法深拷贝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Serializable 序列化深拷贝\" href = \"#\"><span class=\"toc-number\">3.2.3.</span> <span class=\"toc-text\">Serializable 序列化深拷贝</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Java 类\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">Java 类 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"类的初始化顺序\" href = \"#\"><span class=\"toc-number\">4.1.</span> <span class=\"toc-text\"> 类的初始化顺序 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"无父类\" href = \"#\"><span class=\"toc-number\">4.1.1.</span> <span class=\"toc-text\"> 无父类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"有父类\" href = \"#\"><span class=\"toc-number\">4.1.2.</span> <span class=\"toc-text\">有父类</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Java 关键字\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">Java 关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"static\" href = \"#\"><span class=\"toc-number\">5.1.</span> <span class=\"toc-text\">static</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"finnal\" href = \"#\"><span class=\"toc-number\">5.2.</span> <span class=\"toc-text\">finnal</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"函数式接口\" href = \"#\"><span class=\"toc-number\">6.</span> <span class=\"toc-text\">函数式接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Supplier：无参有返回值\" href = \"#\"><span class=\"toc-number\">6.1.</span> <span class=\"toc-text\">Supplier：无参有返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Consumer：有参无返回值\" href = \"#\"><span class=\"toc-number\">6.2.</span> <span class=\"toc-text\">Consumer：有参无返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Function：有参有返回值\" href = \"#\"><span class=\"toc-number\">6.3.</span> <span class=\"toc-text\">Function：有参有返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Callale：无参有返回值\" href = \"#\"><span class=\"toc-number\">6.4.</span> <span class=\"toc-text\">Callale：无参有返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Runable：无参无返回值\" href = \"#\"><span class=\"toc-number\">6.5.</span> <span class=\"toc-text\">Runable：无参无返回值</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"序列化与反序列化\" href = \"#\"><span class=\"toc-number\">7.</span> <span class=\"toc-text\">序列化与反序列化 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"结论\" href = \"#\"><span class=\"toc-number\">7.1.</span> <span class=\"toc-text\"> 结论</span></a></li></ol></li></ol>","categories":[{"name":"JavaStudy","path":"api/categories/JavaStudy.json","url":"/categories/JavaStudy/"}],"tags":[]}