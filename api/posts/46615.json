{"title":"Caffeine","slug":"TechStack_Caffeine","date":"2022-11-11","updated":"2022-11-11","comments":true,"path":"api/posts/46615.json","excerpt":"<blockquote><p> 本文主要介绍了关于 Caffeine 的用法 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>本文主要介绍了关于 Caffeine 的用法</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"Caffeine 简介\"><a href=\"#Caffeine 简介\" class=\"headerlink\" title=\"Caffeine 简介\"></a>Caffeine 简介</h1><blockquote>\n<p>Caffeine 是一种在本地进行本地缓存的缓存库，可以使用它来搭建本地缓存 <br> 可使用它构建本地缓存 +Redis 的多级缓存机制<br>Caffeine 提供了四种缓存添加策略：</p>\n<ul>\n<li>手动加载</li>\n<li>自动加载</li>\n<li>手动异步加载</li>\n<li>自动异步加载</li>\n</ul>\n</blockquote>\n<h1 id=\"手动加载\"><a href=\"# 手动加载\" class=\"headerlink\" title=\"手动加载\"></a>手动加载</h1> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class=\"line\">              <span class=\"comment\">// 设置数据过期时间</span></span><br><span class=\"line\">              .expireAfterWrite(<span class=\"number\">10</span>, TimeUnit.MINUTES)</span><br><span class=\"line\">              <span class=\"comment\">// 设置数据的最大长度</span></span><br><span class=\"line\">              .maximumSize(<span class=\"number\">10_000</span>)</span><br><span class=\"line\">              .build();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;key1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 根据 key 查找一个缓存元素， 没有查找到的时候返回 null</span></span><br><span class=\"line\">              <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> cache.getIfPresent(key);</span><br><span class=\"line\">      <span class=\"comment\">// 根据 key 查找缓存，如果缓存存在，则返回对应缓存值，如果缓存不存在则生成缓存元素, 如果无法生成则返回 nul</span></span><br><span class=\"line\">              <span class=\"type\">String</span> <span class=\"variable\">value2</span> <span class=\"operator\">=</span> cache.get(key, <span class=\"built_in\">this</span>::createValueByKey);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 添加一个缓存元素</span></span><br><span class=\"line\">              cache.put(<span class=\"string\">&quot;key2&quot;</span>,<span class=\"string\">&quot;xtzl&quot;</span>);</span><br><span class=\"line\">              <span class=\"type\">String</span> <span class=\"variable\">value_key2</span> <span class=\"operator\">=</span> cache.getIfPresent(<span class=\"string\">&quot;key2&quot;</span>);</span><br><span class=\"line\">              Assertions.assertEquals(<span class=\"string\">&quot;xtzl&quot;</span>,value_key2);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 移除一个缓存元素</span></span><br><span class=\"line\">              cache.invalidate(<span class=\"string\">&quot;key2&quot;</span>);</span><br><span class=\"line\">              value_key2 = cache.getIfPresent(<span class=\"string\">&quot;key2&quot;</span>);</span><br><span class=\"line\">              Assertions.assertNull(value_key2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没查到缓存之后生成缓存元素的方法, 生成但是还没有加入到 Cache 中</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String <span class=\"title function_\">createValueByKey</span><span class=\"params\">(String key)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> key+<span class=\"string\">&quot;_value&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自动加载\"><a href=\"# 自动加载\" class=\"headerlink\" title=\"自动加载\"></a>自动加载</h1> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LoadingCache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class=\"line\">            .maximumSize(<span class=\"number\">10_000</span>)</span><br><span class=\"line\">            .expireAfterWrite(<span class=\"number\">10</span>, TimeUnit.MINUTES)</span><br><span class=\"line\">            .build(<span class=\"built_in\">this</span>::createExpensiveGraph);</span><br><span class=\"line\">    <span class=\"comment\">// 往缓存中存入数据</span></span><br><span class=\"line\">        cache.put(<span class=\"string\">&quot;key2&quot;</span>,<span class=\"string\">&quot;value2&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 查找缓存，若存在则返回对应缓存值，如果缓存不存在则调用指定方法生成指定缓存值,  如果无法生成则返回 null</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">val_key1</span> <span class=\"operator\">=</span> cache.get(<span class=\"string\">&quot;key1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">val_key2</span> <span class=\"operator\">=</span> cache.get(<span class=\"string\">&quot;key2&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 批量查找缓存，如果缓存不存在则生成缓存元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 模拟加入多个缓存元素</span></span><br><span class=\"line\">        List&lt;String&gt; cacheKeyList= <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            cache.put(<span class=\"string\">&quot;k&quot;</span> + i,<span class=\"string\">&quot;v&quot;</span> + i);</span><br><span class=\"line\">            cacheKeyList.add(<span class=\"string\">&quot;k&quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Map&lt;String, String&gt; cacheAll = cache.getAll(cacheKeyList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 验证是否正常生成</span></span><br><span class=\"line\">        Assertions.assertEquals(<span class=\"string\">&quot;key1_cache_value&quot;</span>, val_key1);</span><br><span class=\"line\">        Assertions.assertEquals(<span class=\"string\">&quot;value2&quot;</span>,val_key2);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            Assertions.assertEquals(<span class=\"string\">&quot;v&quot;</span>+i,cacheAll.get(<span class=\"string\">&quot;k&quot;</span>+i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> String <span class=\"title function_\">createExpensiveGraph</span><span class=\"params\">(String key)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key+<span class=\"string\">&quot;_cache_value&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手动加载与自动加载的区别\"><a href=\"# 手动加载与自动加载的区别\" class=\"headerlink\" title=\"手动加载与自动加载的区别\"></a>手动加载与自动加载的区别</h1><blockquote>\n<ul>\n<li>手动加载在 Caffeine.newBuilder()中未指定创建缓存值的方法</li>\n<li>手动加载将 getIfPresent() 和 get()方法区分开</li>\n<li>手动加载在 get()方法需要指定创建缓存值的方法    </li>\n</ul>\n</blockquote>\n<blockquote>\n<p>总结：<br> 个人感觉还是自动加载方便。因为在 build 我们的 Cache 的时候就已经指定了创建缓存值的方法</p>\n</blockquote>\n<h1 id=\"手动异步加载\"><a href=\"# 手动异步加载\" class=\"headerlink\" title=\"手动异步加载\"></a>手动异步加载</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestManualAsynchronous</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        AsyncCache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class=\"line\">                .expireAfterWrite(<span class=\"number\">10</span>, TimeUnit.MINUTES)</span><br><span class=\"line\">                .maximumSize(<span class=\"number\">10_000</span>)</span><br><span class=\"line\">                .buildAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;key1&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 查找一个缓存元素， 没有查找到的时候返回 null</span></span><br><span class=\"line\">            CompletableFuture&lt;String&gt; key_value = cache.getIfPresent(key);</span><br><span class=\"line\">        <span class=\"comment\">// 查找缓存元素，如果不存在，则异步生成对应 key 的缓存值</span></span><br><span class=\"line\">            CompletableFuture&lt;String&gt; key_get_value = cache.get(key, <span class=\"built_in\">this</span>::createExpensiveGraph);</span><br><span class=\"line\">        <span class=\"comment\">// 添加或者更新一个缓存元素</span></span><br><span class=\"line\">            cache.put(key, key_get_value);</span><br><span class=\"line\">        <span class=\"comment\">// 移除一个缓存元素</span></span><br><span class=\"line\">        CompletableFuture&lt;String&gt; key3_value = cache.get(<span class=\"string\">&quot;key3&quot;</span>, <span class=\"built_in\">this</span>::createExpensiveGraph);</span><br><span class=\"line\">        cache.put(<span class=\"string\">&quot;key3&quot;</span>,key3_value);</span><br><span class=\"line\">        cache.synchronous().invalidate(<span class=\"string\">&quot;key3&quot;</span>); <span class=\"comment\">// 移除</span></span><br><span class=\"line\">        CompletableFuture&lt;String&gt; key3_del = cache.getIfPresent(<span class=\"string\">&quot;key3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 验证</span></span><br><span class=\"line\">        Assertions.assertNull(key_value);</span><br><span class=\"line\">        Assertions.assertEquals(<span class=\"string\">&quot;key1_value&quot;</span>,key_get_value.join()); <span class=\"comment\">// join 或者 get 方法是得到字符串类型的值</span></span><br><span class=\"line\">        Assertions.assertNull(key3_del);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">createExpensiveGraph</span><span class=\"params\">(String key)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key+<span class=\"string\">&quot;_value&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自动异步加载\"><a href=\"# 自动异步加载\" class=\"headerlink\" title=\"自动异步加载\"></a>自动异步加载</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","url":"/posts/46615/","min2read":3,"word4post":858,"prev_post":null,"next_post":{"title":"sql_TSQL","url":"/posts/4967/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Caffeine 简介\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">Caffeine 简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"手动加载\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">手动加载</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"自动加载\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">自动加载</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"手动加载与自动加载的区别\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">手动加载与自动加载的区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"手动异步加载\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">手动异步加载</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"自动异步加载\" href = \"#\"><span class=\"toc-number\">6.</span> <span class=\"toc-text\">自动异步加载</span></a></li></ol>","categories":[{"name":"Cache","path":"api/categories/Cache.json","url":"/categories/Cache/"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json","url":"/tags/Cache/"}]}