{"title":"GitWords","slug":"AC-GitWords","date":"2022-07-22","updated":"2024-01-26","comments":true,"path":"api/posts/33301.json","excerpt":"<blockquote><p> 记录了 git 的常用命令 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>记录了 git 的常用命令</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"Git 颜色\"><a href=\"#Git 颜色\" class=\"headerlink\" title=\"Git 颜色\"></a>Git 颜色</h1><blockquote>\n<ul>\n<li>红褐色：创建之后没有 add，没提交，不在版本控制范围之内，这时候文件是红褐色的，需要先 add 文件；</li>\n<li>绿色：add 之后是文件绿色的，没有提交（commit）;</li>\n<li>蓝色：原本拉取过来之后就有一个文件，改动过后没有提交（commit）是蓝色的，提交之后，变成正常颜色。</li>\n</ul>\n</blockquote>\n<h1 id=\"Git 常用操作命令\"><a href=\"#Git 常用操作命令\" class=\"headerlink\" title=\"Git 常用操作命令\"></a>Git 常用操作命令</h1><blockquote>\n<ul>\n<li>git ls-files 查看暂存区文件</li>\n</ul>\n<hr>\n<ul>\n<li>git init 初始化仓库</li>\n</ul>\n<hr>\n<ul>\n<li>git add . 添加所有文件进暂存区</li>\n</ul>\n<hr>\n<ul>\n<li>git commit 提交到本地仓库</li>\n</ul>\n<hr>\n<ul>\n<li>git push 推送到远程仓库</li>\n</ul>\n<hr>\n<ul>\n<li>git pull 从远程仓库拉取最新代码</li>\n<li>git pull origin main // 从 origin 远程仓库拉取分支 main 的代码到本地的当前分支</li>\n<li>git pull -rebase</li>\n</ul>\n<hr>\n<ul>\n<li>git checkout -b master 新建一个 master 分支</li>\n</ul>\n<hr>\n<ul>\n<li>git branch -al 查看所有本地分支</li>\n</ul>\n<hr>\n<ul>\n<li>git checkout 本地分支名 切换到其他的本地分支</li>\n</ul>\n<hr>\n<ul>\n<li>git remote add origin <a href=\"mailto:&#x67;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;\">&#x67;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>:xxxx/xx.git //origin 是自定义的远程库的名字，这是给本地仓库添加远程仓库</li>\n</ul>\n<hr>\n<ul>\n<li>git remote rm origin 与远程仓库解绑</li>\n</ul>\n<hr>\n<ul>\n<li>git remote -v 查看远程仓库的相关信息</li>\n</ul>\n<hr>\n<ul>\n<li>git push -u origin master  // 把当前分支 master 推送到远程；远程库是空的，所以第一次 push 加上 -u 参数；不仅推送了且两个 master 分支相关联，后续 push 命令简化 git push origin master</li>\n<li>git push origin master:main // 把本地的 master 分支上传到 origin 远程仓库的 main 分支去</li>\n<li>git push origin main // 当且仅当本地分支和远程分支名相同的时候可以直接这样 push</li>\n</ul>\n<hr>\n<ul>\n<li>git clone <a href=\"mailto:&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;\">&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:lengnuann/L.git xtzl/ljw/ 克隆指令将远程仓库的代码克隆到本地的 xtzk/ljw 这个文件夹之下</li>\n</ul>\n<hr>\n<ul>\n<li>git log 查看日志</li>\n</ul>\n<hr>\n<ul>\n<li>git branch –set-upstream-to origin/main master 关联分支，将远程仓库的 main 分支和 master 相关联，如果执行失败，先去 IDEA 的 Git 下的 Pull 中获取分支，多刷新一下</li>\n</ul>\n<hr>\n<ul>\n<li>git stash 暂存工作区的内容</li>\n</ul>\n<hr>\n<ul>\n<li>git stash pop 恢复暂存的工作区内容</li>\n</ul>\n<hr>\n<ul>\n<li>git stash list 查询工作区所有 stash 的列表</li>\n</ul>\n<hr>\n<ul>\n<li>git stash apply 例如：git stash apply stash@{2} 表示指定 stash@{2}这个暂存版本，如果不指定，则 git stash pop 默认恢复最新的一次 stash</li>\n</ul>\n<hr>\n<ul>\n<li>git stash clear 清空 stash</li>\n</ul>\n<hr>\n<ul>\n<li>git branch –set-upstream-to=gitee/master master : 关联远程分支与本地分支，第二个 master 指的是第本地分支，gitee/master，指的是 gitee 设置远程仓库名，中的远程分支 master, 其中远程仓库必须有该分支</li>\n</ul>\n<hr>\n<ul>\n<li>git reset –hard 6b2b7aa ：强制回退到某个版本，将不会保存原来的代码（慎用！！！）</li>\n</ul>\n<hr>\n<ul>\n<li>git branch  –track  experimental  origin/experimental ：同样是追踪分支</li>\n<li>git branch -m master main 将 matser 分支更名为 main 分支 </li>\n</ul>\n<hr>\n<ul>\n<li>git config –global push.default simple  // 设置默认行为为 simple。 Git2.0 以后</li>\n</ul>\n<hr>\n<ul>\n<li>git config –global push.default matching // 设置默认行为为 matching。Git2.0 以前</li>\n</ul>\n<hr>\n<ul>\n<li>git config –global user.name  userName</li>\n</ul>\n<hr>\n<ul>\n<li>git config –global user.email email</li>\n</ul>\n<hr>\n<ul>\n<li>git reflog // 查看版本信息</li>\n</ul>\n</blockquote>\n<h1 id=\"三种新建项目绑定 gitee 的远程仓库方式\"><a href=\"# 三种新建项目绑定 gitee 的远程仓库方式\" class=\"headerlink\" title=\"三种新建项目绑定 gitee 的远程仓库方式\"></a>三种新建项目绑定 gitee 的远程仓库方式</h1><h1 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h1><blockquote>\n<p>可以直接 git clone 远程仓库，就默认绑定 clone 的那个分支和本地的 master 分支了</p>\n</blockquote>\n<h1 id=\"git-remote-add-f-url\"><a href=\"#git-remote-add-f-url\" class=\"headerlink\" title=\"git remote add -f url\"></a>git remote add -f url</h1><blockquote>\n<p>添加 -f 参数相当于执行一次 git fetch 操作，将会把远程的同名分支都绑定到本地的分支 <br> 然后输入 git pull origin master, 即可将远程 origin 的仓库中的 master 分支绑定拉取到当前分支，如果本地分支没有远程分支已有的分支，则自动在本地创建，但是这样做的弊端就是每次都要手动选择拉取远程仓库的哪一个分支</p>\n</blockquote>\n<h1 id=\"git-remote-add-url\"><a href=\"#git-remote-add-url\" class=\"headerlink\" title=\"git remote add url\"></a>git remote add url</h1><blockquote>\n<p>执行完这个之后需要手动再执行一次 git fetch<br>git fetch 之后，会自动将远程仓库的同名分支与本地仓库进行匹配绑定，如果本地没有分支，则自动在本地新建同名分支并绑定。</p>\n</blockquote>\n<h1 id=\"两个独立仓库的合并\"><a href=\"# 两个独立仓库的合并\" class=\"headerlink\" title=\"两个独立仓库的合并\"></a>两个独立仓库的合并</h1><blockquote>\n<p>直接用 IDEA 的拉取就行，建议之间 rebase<br>即便是远程仓库和本地仓库并没有历史相同版本点，也可以进行合并 <br>git pull origin master –allow-unrelated-histories<br> 如果合并失败，就只能使用 rebase 了<br>git pull –rebase origin master</p>\n</blockquote>\n","url":"/posts/33301/","min2read":4,"word4post":"1.1k","prev_post":{"title":"Consul","url":"/posts/29713/"},"next_post":{"title":"LinuxWords","url":"/posts/17418/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Git 颜色\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">Git 颜色</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Git 常用操作命令\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">Git 常用操作命令</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"三种新建项目绑定 gitee 的远程仓库方式\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">三种新建项目绑定 gitee 的远程仓库方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"git-clone\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">git clone</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"git-remote-add-f-url\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">git remote add -f url</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"git-remote-add-url\" href = \"#\"><span class=\"toc-number\">6.</span> <span class=\"toc-text\">git remote add url</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"两个独立仓库的合并\" href = \"#\"><span class=\"toc-number\">7.</span> <span class=\"toc-text\">两个独立仓库的合并</span></a></li></ol>","categories":[{"name":"Accumulate","path":"api/categories/Accumulate.json","url":"/categories/Accumulate/"}],"tags":[{"name":"git","path":"api/tags/git.json","url":"/tags/git/"}]}