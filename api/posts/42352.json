{"title":"TechStack-ASynchronization","slug":"TechStack-ASynchronization","date":"2024-01-10","updated":"2024-01-10","comments":true,"path":"api/posts/42352.json","excerpt":"<blockquote><p> 关于异步的操作 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>关于异步的操作</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"CompletableFuture\"><a href=\"#CompletableFuture\" class=\"headerlink\" title=\"CompletableFuture\"></a>CompletableFuture</h1><h2 id=\"函数 API 解析\"><a href=\"# 函数 API 解析\" class=\"headerlink\" title=\"函数 API 解析\"></a>函数 API 解析 </h2><h3 id=\"提交主任务\"><a href=\"# 提交主任务\" class=\"headerlink\" title=\"提交主任务\"></a> 提交主任务</h3><blockquote>\n<ul>\n<li>supplyAsync：有返回值地提交任务给线程池执行</li>\n<li>runAsync：无返回值地提交任务给线程池执行</li>\n<li>allOf：将多个异步线程组成一组，等待多个异步线程执行完毕之后，返回统一可操作这组线程的对象</li>\n</ul>\n</blockquote>\n<h3 id=\"回调任务\"><a href=\"# 回调任务\" class=\"headerlink\" title=\"回调任务\"></a>回调任务</h3><blockquote>\n<ul>\n<li>thenApply：若主任务有返回结果，则就有一个参数 result，回调函数有返回值</li>\n<li>thenAccept：若主任务有返回结果，则就有一个参数 result，回调函数无返回值</li>\n<li>thenRun：无参数，回调函数无返回值</li>\n<li>thenCompose：可无限套娃，执行完上一个回调逻辑之后，才会执行下一个回调逻辑，可控制多个异步线程的回调逻辑的顺序</li>\n</ul>\n</blockquote>\n<h2 id=\"实战案例\"><a href=\"# 实战案例\" class=\"headerlink\" title=\"实战案例\"></a>实战案例 </h2><h3 id=\"多线程执行后阻塞主线程\"><a href=\"# 多线程执行后阻塞主线程\" class=\"headerlink\" title=\"多线程执行后阻塞主线程\"></a> 多线程执行后阻塞主线程 </h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加新任务并执行 </span></span><br><span class=\"line\">List&lt;CompletableFuture&lt;Integer&gt;&gt; taskList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicNum</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">increment</span> <span class=\"operator\">=</span> atomicNum.getAndIncrement();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 当前执行的线程是：&quot;</span>+increment);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> increment;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    taskList.add(future);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等待所有任务执行完成，并调用 join 方法来阻塞主线程，join 也可以用 get() 替代，也会阻塞主线程</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 allOf 的主要目的就是获取到可以控制一组异步线程的对象</span></span><br><span class=\"line\">CompletableFuture.allOf(taskList.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">CompletableFuture</span>[<span class=\"number\">0</span>])).join();</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加异步线程的回调线程\"><a href=\"# 添加异步线程的回调线程\" class=\"headerlink\" title=\"添加异步线程的回调线程\"></a>添加异步线程的回调线程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加新任务并执行</span></span><br><span class=\"line\">      List&lt;CompletableFuture&lt;Integer&gt;&gt; taskList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">      <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicNum</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">          CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">              <span class=\"type\">int</span> <span class=\"variable\">increment</span> <span class=\"operator\">=</span> atomicNum.getAndIncrement();</span><br><span class=\"line\">              System.out.println(<span class=\"string\">&quot; 当前执行的线程是：&quot;</span>+increment);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> increment;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          future.thenRun(()-&gt;&#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  System.out.println(<span class=\"string\">&quot; 当前执行完结的异步回调线程是：&quot;</span>+future.get());</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                  e.printStackTrace();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">                  e.printStackTrace();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          taskList.add(future);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 等待所有任务执行完成，并获取到可控制所有线程的对象</span></span><br><span class=\"line\">      CompletableFuture&lt;Void&gt; voidCompletableFuture = CompletableFuture.allOf(taskList.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">CompletableFuture</span>[<span class=\"number\">0</span>]));</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制回调函数的执行顺序\"><a href=\"# 控制回调函数的执行顺序\" class=\"headerlink\" title=\"控制回调函数的执行顺序\"></a>控制回调函数的执行顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加新任务并执行</span></span><br><span class=\"line\">CompletableFuture&lt;String&gt; futureOne = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-one&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;task-one&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; futureTwo = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-two&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;task-two&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; futureThree = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-three&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;task-three&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等待所有任务执行完成</span></span><br><span class=\"line\">futureOne.thenCompose(res1-&gt;&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-one 的任务结果为：&quot;</span>+res1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-one 回调函数已经执行 &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> futureTwo.thenCompose(res2-&gt;&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task-two 的任务结果为：&quot;</span>+res2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task-two 回调函数已经执行 &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> futureThree.thenAccept(res3-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task-three 的任务结果为 &quot;</span>+res3);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task-three 回调函数已经执行 &quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"控制主任务的执行顺序（回调函数套娃）\"><a href=\"# 控制主任务的执行顺序（回调函数套娃）\" class=\"headerlink\" title=\"控制主任务的执行顺序（回调函数套娃）\"></a>控制主任务的执行顺序（回调函数套娃）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; futureOne = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-one&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;task-one&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; futureTwo = futureOne.thenApply(res1 -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-two&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;task-two&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; futureThree = futureTwo.thenApply(res2 -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;task-three&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;task-three&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","url":"/posts/42352/","min2read":3,"word4post":805,"prev_post":{"title":"TechStack-InterfaceDefault","url":"/posts/41697/"},"next_post":{"title":"Online-bug","url":"/posts/45986/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"CompletableFuture\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">CompletableFuture</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"函数 API 解析\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">函数 API 解析 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"提交主任务\" href = \"#\"><span class=\"toc-number\">1.1.1.</span> <span class=\"toc-text\"> 提交主任务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"回调任务\" href = \"#\"><span class=\"toc-number\">1.1.2.</span> <span class=\"toc-text\">回调任务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"实战案例\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">实战案例 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"多线程执行后阻塞主线程\" href = \"#\"><span class=\"toc-number\">1.2.1.</span> <span class=\"toc-text\"> 多线程执行后阻塞主线程 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"添加异步线程的回调线程\" href = \"#\"><span class=\"toc-number\">1.2.2.</span> <span class=\"toc-text\">添加异步线程的回调线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"控制回调函数的执行顺序\" href = \"#\"><span class=\"toc-number\">1.2.3.</span> <span class=\"toc-text\">控制回调函数的执行顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"控制主任务的执行顺序（回调函数套娃）\" href = \"#\"><span class=\"toc-number\">1.2.4.</span> <span class=\"toc-text\">控制主任务的执行顺序（回调函数套娃）</span></a></li></ol></li></ol></li></ol>","categories":[{"name":"TechStack","path":"api/categories/TechStack.json","url":"/categories/TechStack/"}],"tags":[]}