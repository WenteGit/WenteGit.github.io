{"title":"Ribbon","slug":"Cloud_Ribbon","date":"2022-07-23","updated":"2022-08-01","comments":true,"path":"api/posts/49475.json","excerpt":"<blockquote><p> 整理了关于 Ribbon 的相关知识 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>整理了关于 Ribbon 的相关知识</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"核心\"><a href=\"# 核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><blockquote>\n<ul>\n<li>主要核心就是负载均衡</li>\n</ul>\n</blockquote>\n<h1 id=\"依赖引入\"><a href=\"# 依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Ribbon 的核心组件 IRule 七种负载均衡的选择方式\"><a href=\"#Ribbon 的核心组件 IRule 七种负载均衡的选择方式\" class=\"headerlink\" title=\"Ribbon 的核心组件 IRule 七种负载均衡的选择方式\"></a>Ribbon 的核心组件 IRule 七种负载均衡的选择方式</h1><blockquote>\n<hr>\n<p>(出厂默认)RoundRobinRule： 轮询，轮流访问不同的实例</p>\n<hr>\n<p>RandomRule : 随机，随机访问不同的实例</p>\n<hr>\n<p>RetryRule:<br>先按照 RoundRobinRule 的策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用的服务。</p>\n<hr>\n<p>WeightedResponseTimeRule:<br>对 RoundRobinRule 的扩展，响应速度越快的实例选择权重就越大，越容易被选择。</p>\n<hr>\n<p>BestAvailableRule:<br>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。</p>\n<hr>\n<p>AvailabilityFilteringRule:<br>先过滤掉故障实例，再选择并发较小的实例。</p>\n<hr>\n<p>ZoneAvoidanceRule:<br>默认规则，复合判断 server 所在区域的性能和 server 的可用性选择服务器。</p>\n<hr>\n</blockquote>\n<h1 id=\"Ribbon 修改负载均衡的方式\"><a href=\"#Ribbon 修改负载均衡的方式\" class=\"headerlink\" title=\"Ribbon 修改负载均衡的方式\"></a>Ribbon 修改负载均衡的方式</h1><blockquote>\n<p><strong>一定不能在主配置类可以扫到的包下，必须新建一个主配置类扫不到的包 </strong><br> 注意点：  </p>\n<ul>\n<li>注解里的服务名要小写</li>\n<li>配置类名不能是 MyRule，否则报错</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IRule 配置类添加</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MySelfRule</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IRule <span class=\"title function_\">myrule</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改为随机方式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomRule</span>(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//80 端口主运行类注解添加</span></span><br><span class=\"line\"><span class=\"comment\">// 其中 name 表示的是微服务名称</span></span><br><span class=\"line\"><span class=\"meta\">@RibbonClient(name = &quot;cloud-payment-service&quot;,configuration = MySelfRule.class)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Ribbon 的轮询算法\"><a href=\"#Ribbon 的轮询算法\" class=\"headerlink\" title=\"Ribbon 的轮询算法\"></a>Ribbon 的轮询算法</h1><blockquote>\n<p>rest 接口的第几次请求数 % 服务器集群实例数量 = 实际调用的服务器 (实例) 的下标</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取指定服务的所有实例集合</span></span><br><span class=\"line\"> List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class=\"string\">&quot;consul-provider-payment&quot;</span>);</span><br><span class=\"line\"> 例如：</span><br><span class=\"line\"> instances[<span class=\"number\">0</span>]=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8001</span></span><br><span class=\"line\"> instances[<span class=\"number\">1</span>]=<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8002</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","url":"/posts/49475/","min2read":1,"word4post":478,"prev_post":{"title":"Cloud_OpenFeign","url":"/posts/40393/"},"next_post":{"title":"Cloud_Sleuth","url":"/posts/15024/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"核心\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">核心</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"依赖引入\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">依赖引入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Ribbon 的核心组件 IRule 七种负载均衡的选择方式\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">Ribbon 的核心组件 IRule 七种负载均衡的选择方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Ribbon 修改负载均衡的方式\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">Ribbon 修改负载均衡的方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Ribbon 的轮询算法\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">Ribbon 的轮询算法</span></a></li></ol>","categories":[{"name":"Service_invoke","path":"api/categories/Service_invoke.json","url":"/categories/Service-invoke/"}],"tags":[{"name":"Ribbon","path":"api/tags/Ribbon.json","url":"/tags/Ribbon/"}]}