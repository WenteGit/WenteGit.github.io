{"title":"Ribbon","slug":"Cloud_Ribbon","date":"2022-07-23","updated":"2022-07-23","comments":true,"path":"api/posts/49475.json","excerpt":"<blockquote><p> 整理了关于 Ribbon 的相关知识 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p> 整理了关于 Ribbon 的相关知识 </p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"依赖引入\"><a href=\"# 依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a> 依赖引入 </h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Ribbon 的七种负载均衡的选择方式\"><a href=\"#Ribbon 的七种负载均衡的选择方式\" class=\"headerlink\" title=\"Ribbon 的七种负载均衡的选择方式\"></a>Ribbon 的七种负载均衡的选择方式 </h1><blockquote>\n<hr>\n<p>(出厂默认)RoundRobinRule： 轮询，轮流访问不同的实例 </p>\n<hr>\n<p>RandomRule : 随机，随机访问不同的实例 </p>\n<hr>\n<p>RetryRule:<br> 先按照 RoundRobinRule 的策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用的服务。</p>\n<hr>\n<p>WeightedResponseTimeRule:<br> 对 RoundRobinRule 的扩展，响应速度越快的实例选择权重就越大，越容易被选择。</p>\n<hr>\n<p>BestAvailableRule:<br> 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。</p>\n<hr>\n<p>AvailabilityFilteringRule:<br> 先过滤掉故障实例，再选择并发较小的实例。</p>\n<hr>\n<p>ZoneAvoidanceRule:<br> 默认规则，复合判断 server 所在区域的性能和 server 的可用性选择服务器。</p>\n<hr>\n</blockquote>\n","url":"/posts/49475/","min2read":1,"word4post":254,"prev_post":null,"next_post":{"title":"Consul","url":"/posts/29713/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"依赖引入\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\"> 依赖引入 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Ribbon 的七种负载均衡的选择方式\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">Ribbon 的七种负载均衡的选择方式 </span></a></li></ol>","categories":[{"name":"Service_invoke","path":"api/categories/Service_invoke.json","url":"/categories/Service-invoke/"}],"tags":[{"name":"Ribbon","path":"api/tags/Ribbon.json","url":"/tags/Ribbon/"}]}