{"title":"CppLei","slug":"CppLei","date":"2022-07-18","updated":"2022-07-18","comments":true,"path":"api/posts/20863.json","excerpt":"<blockquote><p> 介绍了 C++ 中常用的类型、关键字 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>介绍了 C++ 中常用的类型、关键字</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"C- 常用类型及其关键字整理\"><a href=\"#C- 常用类型及其关键字整理\" class=\"headerlink\" title=\"C++ 常用类型及其关键字整理\"></a>C++ 常用类型及其关键字整理</h1><blockquote>\n<h2 id=\"Bool- 类型\"><a href=\"#Bool- 类型\" class=\"headerlink\" title=\"Bool 类型\"></a>Bool 类型</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> 变量是 值保存  真或者假这个值 （TRUE 或者 FAUSE），<span class=\"number\">1</span>表示真，<span class=\"number\">0</span> 表示假。在Ｃ语言中所有的非零值都为真所以给 <span class=\"type\">bool</span> 变量赋值，赋值为 <span class=\"number\">0</span> 则为<span class=\"number\">0</span>。赋值为非<span class=\"number\">0</span> 则为<span class=\"number\">1</span>。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"Cout- 关键字\"><a href=\"#Cout- 关键字\" class=\"headerlink\" title=\"Cout 关键字\"></a>Cout 关键字</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cout&lt;&lt;“sadasd”&lt;&lt; endl</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"Cin：- 输入\"><a href=\"#Cin：- 输入\" class=\"headerlink\" title=\"Cin： 输入\"></a>Cin： 输入</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cin &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">Cin.<span class=\"built_in\">getline</span>(arrchar,<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">注：<span class=\"built_in\">getline</span>()函数中的 arrchar 是表示的字符数组，<span class=\"number\">20</span>表示的是最多输入 <span class=\"number\">19</span> 个字符，或者遇到回车结束</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"const- 类型\"><a href=\"#const- 类型\" class=\"headerlink\" title=\"const 类型\"></a>const 类型</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> max =<span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;\t</span><br><span class=\"line\">注：<span class=\"type\">const</span>关键字主要是用来声明常量的，定义之后不能改变了</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"string- 关键字\"><a href=\"#string- 关键字\" class=\"headerlink\" title=\"string 关键字\"></a>string 关键字</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1=”asd”;</span><br><span class=\"line\"></span><br><span class=\"line\">string s2=”asdasd”;</span><br><span class=\"line\"></span><br><span class=\"line\">String s= s1+s2; <span class=\"comment\">// 字符串的拼接 </span></span><br><span class=\"line\"></span><br><span class=\"line\"> 类比 java 的 input.nextline（获取输入的整个一行）</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(cin,s);<span class=\"comment\">// 获取输入的整个一行并赋值给字符串变量 s</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">length</span>() <span class=\"comment\">// 获取字符串的长度，会包括空格</span></span><br><span class=\"line\"></span><br><span class=\"line\">S.<span class=\"built_in\">substr</span>(start,counts); <span class=\"comment\">// 从下标为 start 开始取，一共取 counts 个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">S.<span class=\"built_in\">substr</span>(start); <span class=\"comment\">// 从下标为 start 开始取，取遍整个字符串后面的所有字符</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"结构体\"><a href=\"# 结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">stu</span>&#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    stu a[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注: 结构体可以直接用名字进行引用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"amp- 的引用\"><a href=\"#amp- 的引用\" class=\"headerlink\" title=\"&amp; 的引用\"></a>&amp; 的引用</h2></blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可在自定义的函数的参数前加一个 &amp;，main 函数直接传参数，便可在地址上修改参数的值</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"Pair 类型\"><a href=\"#Pair 类型\" class=\"headerlink\" title=\"Pair 类型\"></a>Pair 类型</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    定义和初始化：</span><br><span class=\"line\">    pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>; <span class=\"comment\">// 用已经有的 pair 对象 p1 来初始化 p2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">pair&lt;<span class=\"type\">int</span>,<span class=\"type\">double</span>&gt; <span class=\"title\">p3</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">1.2</span>)</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; p4 ;  <span class=\"comment\">// 没有写初始化值，自动初始化为 (0,0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"> 注：每个 pair 可以存储两个值，这两个值可以是不同的数据类型，存储的值可以是基本数据类型，也可以是自己定义的数据类型</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h2 id=\"可变数组 -Vectory\"><a href=\"# 可变数组 -Vectory\" class=\"headerlink\" title=\"可变数组 Vectory\"></a>可变数组 Vectory</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  vector &lt;<span class=\"type\">int</span>&gt; arr; </span><br><span class=\"line\">arr.<span class=\"built_in\">resize</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 给该数组分配十个空间 </span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">arr.<span class=\"built_in\">push_back</span>(<span class=\"number\">20</span>); <span class=\"comment\">// 将 20 放到数组的最后</span></span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">arr2</span> (<span class=\"number\">10</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 给开辟 10 个空间，给每个空间都初始化为 3</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 arr[0]=1, 这样的方式赋值的时候，一定是已经给数组分配过空间了的，否则编译失败</span></span><br><span class=\"line\"><span class=\"comment\">// 但是使用 pushback 的话，可以先不分配空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 迭代器自动遍历整个数组</span></span><br><span class=\"line\"><span class=\"comment\">// arr.end() 的位置是在数组的最后一个元素的下一个位置</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p = arr2.<span class=\"built_in\">begin</span>(); p != arr2.<span class=\"built_in\">end</span>(); p++) &#123;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h2 id=\"set 集合 -：- 存储不含重复元素的集合\"><a href=\"#set 集合 -：- 存储不含重复元素的集合\" class=\"headerlink\" title=\"set 集合 ： 存储不含重复元素的集合\"></a>set 集合 ： 存储不含重复元素的集合</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   set&lt;<span class=\"type\">int</span>&gt; sarr; </span><br><span class=\"line\">sarr.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 给集合添加元素 1</span></span><br><span class=\"line\">sarr.<span class=\"built_in\">insert</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 给集合添加元素 2</span></span><br><span class=\"line\">sarr.<span class=\"built_in\">insert</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 给集合添加元素 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">sarr.<span class=\"built_in\">find</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 返回值是指针，在集合中寻找有没有 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (sarr.<span class=\"built_in\">find</span>(<span class=\"number\">1</span>)==sarr.<span class=\"built_in\">end</span>()) &#123; <span class=\"comment\">// 指针指向最后一个元素的下一个位置</span></span><br><span class=\"line\">\t<span class=\"comment\">// 查找失败，集合中没有</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; 集合中没有这个元素 &quot;</span> &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 找到了</span></span><br><span class=\"line\">\tcout &lt;&lt; *sarr.<span class=\"built_in\">find</span>(<span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sarr.<span class=\"built_in\">erase</span>(<span class=\"number\">2</span>);<span class=\"comment\">// 从集合中删除 2 这个元素</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h2 id=\"map 集合 -：- 存储键值对的集合\"><a href=\"#map 集合 -：- 存储键值对的集合\" class=\"headerlink\" title=\"map 集合 ： 存储键值对的集合\"></a>map 集合 ： 存储键值对的集合</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   map&lt;string,<span class=\"type\">int</span>&gt; mymap;</span><br><span class=\"line\"><span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">mymap[<span class=\"string\">&quot;xt&quot;</span>] = <span class=\"number\">3</span>; </span><br><span class=\"line\">mymap[<span class=\"string\">&quot;zl&quot;</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">mymap.<span class=\"built_in\">insert</span>(&#123; <span class=\"string\">&quot;xxx&quot;</span>,<span class=\"number\">4</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p = mymap.<span class=\"built_in\">begin</span>(); p != mymap.<span class=\"built_in\">end</span>(); p++) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// first 表示的是键，second 表示的是值</span></span><br><span class=\"line\">\t<span class=\"comment\">// p 代指 map 集合中的一个元素，实际上是个指针，指向结构体</span></span><br><span class=\"line\">\tcout &lt;&lt; p-&gt;first &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; p-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h2 id=\"栈 -stack-：先入后出\"><a href=\"# 栈 -stack-：先入后出\" class=\"headerlink\" title=\"栈 stack ：先入后出\"></a>栈 stack ：先入后出</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   stack&lt;<span class=\"type\">int</span>&gt; sta;</span><br><span class=\"line\">sta.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">sta.<span class=\"built_in\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印栈顶元素</span></span><br><span class=\"line\">cout &lt;&lt; sta.<span class=\"built_in\">top</span>() &lt;&lt; endl;</span><br><span class=\"line\">sta.<span class=\"built_in\">pop</span>(); <span class=\"comment\">// 出栈且无返回值</span></span><br><span class=\"line\">sta.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 获取栈的长度</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"队列：先入后出\"><a href=\"# 队列：先入后出\" class=\"headerlink\" title=\"队列：先入后出\"></a>队列：先入后出</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   queue&lt;<span class=\"type\">int</span>&gt;qu;</span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\">qu.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">qu.<span class=\"built_in\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">qu.<span class=\"built_in\">push</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// 出队</span></span><br><span class=\"line\">qu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"><span class=\"comment\">// 获取队首</span></span><br><span class=\"line\">qu.<span class=\"built_in\">front</span>();</span><br><span class=\"line\"><span class=\"comment\">// 获取队尾</span></span><br><span class=\"line\">qu.<span class=\"built_in\">back</span>();</span><br><span class=\"line\"><span class=\"comment\">// 长度</span></span><br><span class=\"line\">qu.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">   <span class=\"comment\">// 入队            </span></span><br><span class=\"line\">   pos.<span class=\"built_in\">emplace</span>(x);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"bitset 数组\"><a href=\"#bitset 数组\" class=\"headerlink\" title=\"bitset 数组\"></a>bitset 数组</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：类似一个字符数组，直接输出的话，是一个二进制数，如果按照数组输出的话，和直接输出相反</span><br><span class=\"line\"></span><br><span class=\"line\">bitset&lt;5&gt; b;\t\t <span class=\"comment\">// 表示 5 个二进制位，初始化为 0 ： 00000</span></span><br><span class=\"line\">\t<span class=\"function\">bitset&lt;5&gt; <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;\t    <span class=\"comment\">// 1 是无符号数，输出 b 为 ：00011 , 此时括号里的数就是二进制数所表示的十进制数</span></span><br><span class=\"line\">\t<span class=\"function\">bitset&lt;5&gt; <span class=\"title\">b</span><span class=\"params\">(<span class=\"string\">&quot;111&quot;</span>)</span></span>; <span class=\"comment\">//111 是字符串，表示在 b 的低 3 位是 1 : 00111</span></span><br><span class=\"line\">\tstring s; <span class=\"type\">int</span> pos, n;</span><br><span class=\"line\">\tbitset&lt;5&gt;<span class=\"built_in\">b</span>(s, pos, n);<span class=\"comment\">// 类似于上面那个，但是这个是截取部分 s 然后作为参数，从下标为 pos 开始，读取 n 个字符</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 下面的是返回为 bool 类型的函数 ： </span></span><br><span class=\"line\">\tb.<span class=\"built_in\">any</span>(); <span class=\"comment\">// 是否有 1</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">none</span>(); <span class=\"comment\">// 是否不存在 1</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">count</span>();<span class=\"comment\">//1 的个数</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">size</span>();<span class=\"comment\">//b 中的元素个数</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">test</span>(<span class=\"number\">3</span>);<span class=\"comment\">// 下标为 3 的元素是不是 1 </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 操作函数</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">flip</span>(); <span class=\"comment\">// 所有位取反</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">flip</span>(i); <span class=\"comment\">// 第 i 为取反</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">reset</span>(); <span class=\"comment\">// 所有位归零</span></span><br><span class=\"line\">\tb.<span class=\"built_in\">reset</span>(i);<span class=\"comment\">// 第 i 位归零</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> long1=b.<span class=\"built_in\">to_ulong</span>();<span class=\"comment\">// 转换成 unsignedlong 的类型</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h2 id=\"sort 排序\"><a href=\"#sort 排序\" class=\"headerlink\" title=\"sort 排序\"></a>sort 排序</h2></blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">arr3</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>; <span class=\"comment\">// 先分配十个空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 默认为升序</span></span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(arr3.<span class=\"built_in\">begin</span>(), arr3.<span class=\"built_in\">end</span>()); <span class=\"comment\">// 从 begin 到 end 这部分进行排序，左开右闭[)，因为 end 所在的位置是没有数据的</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">arr4</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(arr4.<span class=\"built_in\">begin</span>(), arr4.<span class=\"built_in\">end</span>(), cmp); <span class=\"comment\">// begin 的是 x，end 的是 y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cmp 自定义排序</span></span><br><span class=\"line\"><span class=\"comment\">// 返回 1 就顺序不变，如果返回 0 就会自动交换位置，实际上就是利用了快速排序的原理</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123; </span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> x &gt; y; <span class=\"comment\">// 降序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// swap 交换</span></span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(a[<span class=\"number\">1</span>],a[<span class=\"number\">2</span>]); <span class=\"comment\">// 表示把 a 数组中的下标为 1 和 2 的元素位置进行交换</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","url":"/posts/20863/","min2read":6,"word4post":"1.5k","prev_post":{"title":"CppHeadFiles","url":"/posts/56443/"},"next_post":{"title":"Markdown 教程","url":"/posts/33206/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"C- 常用类型及其关键字整理\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">C++ 常用类型及其关键字整理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Bool- 类型\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">Bool 类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Cout- 关键字\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">Cout 关键字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Cin：- 输入\" href = \"#\"><span class=\"toc-number\">1.3.</span> <span class=\"toc-text\">Cin： 输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"const- 类型\" href = \"#\"><span class=\"toc-number\">1.4.</span> <span class=\"toc-text\">const 类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"string- 关键字\" href = \"#\"><span class=\"toc-number\">1.5.</span> <span class=\"toc-text\">string 关键字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"结构体\" href = \"#\"><span class=\"toc-number\">1.6.</span> <span class=\"toc-text\">结构体</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"amp- 的引用\" href = \"#\"><span class=\"toc-number\">1.7.</span> <span class=\"toc-text\">&amp; 的引用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Pair 类型\" href = \"#\"><span class=\"toc-number\">1.8.</span> <span class=\"toc-text\">Pair 类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"可变数组 -Vectory\" href = \"#\"><span class=\"toc-number\">1.9.</span> <span class=\"toc-text\">可变数组 Vectory</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"set 集合 -：- 存储不含重复元素的集合\" href = \"#\"><span class=\"toc-number\">1.10.</span> <span class=\"toc-text\">set 集合 ： 存储不含重复元素的集合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"map 集合 -：- 存储键值对的集合\" href = \"#\"><span class=\"toc-number\">1.11.</span> <span class=\"toc-text\">map 集合 ： 存储键值对的集合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"栈 -stack-：先入后出\" href = \"#\"><span class=\"toc-number\">1.12.</span> <span class=\"toc-text\">栈 stack ：先入后出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"队列：先入后出\" href = \"#\"><span class=\"toc-number\">1.13.</span> <span class=\"toc-text\">队列：先入后出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"bitset 数组\" href = \"#\"><span class=\"toc-number\">1.14.</span> <span class=\"toc-text\">bitset 数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"sort 排序\" href = \"#\"><span class=\"toc-number\">1.15.</span> <span class=\"toc-text\">sort 排序</span></a></li></ol></li></ol>","categories":[{"name":"Cpp","path":"api/categories/Cpp.json","url":"/categories/Cpp/"}],"tags":[{"name":"grammer","path":"api/tags/grammer.json","url":"/tags/grammer/"},{"name":"cpp","path":"api/tags/cpp.json","url":"/tags/cpp/"}]}