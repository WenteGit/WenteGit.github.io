{"title":"Golang-Improve","slug":"Golang-improve","date":"2024-01-28","updated":"2024-01-28","comments":true,"path":"api/posts/57803.json","excerpt":"<blockquote><p>Golang 的进阶提升 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>Golang 的进阶提升</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"包\"><a href=\"# 包\" class=\"headerlink\" title=\"包\"></a>包 </h1><h2 id=\"包的基本使用\"><a href=\"# 包的基本使用\" class=\"headerlink\" title=\"包的基本使用\"></a> 包的基本使用</h2><blockquote>\n<p>使用要点</p>\n<ul>\n<li>一个目录下的统计文件归属一个包，package 的声明要一致</li>\n<li>package 声明的包和对应的目录名可以不一致，但习惯上还是要写成一致的</li>\n<li>包可以嵌套</li>\n<li>同包下的函数不需要导入包，可以直接使用</li>\n<li>main()所在的包，其他包不能使用</li>\n<li>导入包的时候，路径要从 src 下开始写</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// 给包起别名</span></span><br><span class=\"line\">\te <span class=\"string\">&quot;awesomeProject/entities&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;awesomeProject/utils&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tutils.PrintNow()</span><br><span class=\"line\">\tstu := e.Student&#123;Name: <span class=\"string\">&quot; 文特 &quot;</span>, Age: <span class=\"number\">22</span>, Grade: <span class=\"string\">&quot;2024&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Println(stu)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意首字母</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Student 首字母大写表示外部包可以访问</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tGrade <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"init 包初始化\"><a href=\"#init 包初始化\" class=\"headerlink\" title=\"init 包初始化\"></a>init 包初始化</h2><blockquote>\n<p>init 函数的执行顺序如下：</p>\n<ul>\n<li>在同一个 Go 文件中，init 函数的执行顺序是从上到下的</li>\n<li>在同一个包，不同的 Go 文件中，是会将文件名按字符串从小到大排序之后，按从小到大的顺序调用各文件的 init 函数</li>\n<li>在不同的包，如果不相互依赖的话，按照 main 包中 import 的顺序调用其中的 init 函数</li>\n<li>如果 package 存在依赖，那最后被依赖的，最先被执行，例如（-&gt; 表示导入）：main -&gt; pk1 -&gt; pk2 -&gt;pk3，则 pk3 的 init 先执行</li>\n<li>存在依赖的包，不能循环导入，比如说 pk1-&gt;pk2-&gt;pk3, 但是 pk3-&gt;pk1，这样就不行</li>\n<li>一个包可以被导入多次，但是只能被初始化一次</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 主函数执行 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 第一个 init 函数 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 第二个 init 函数 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出如下：</span></span><br><span class=\"line\">第一个 init 函数 </span><br><span class=\"line\"> 第二个 init 函数 </span><br><span class=\"line\"> 主函数执行   </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>init 函数与 main 函数的区别与联系</p>\n</blockquote>\n<ul>\n<li>都是 go 语言中的保留函数，init 用于初始化信息，main 作为程序的入口</li>\n<li>都不能有参数和返回值，也不能被引用</li>\n<li>init 函数可以有多个且可以定义在任意的包中，main 函数只能在 main 包下，并且只能有一个</li>\n<li>执行顺序：先执行 init 函数，后执行 main 函数</li>\n</ul>\n","url":"/posts/57803/","min2read":2,"word4post":571,"prev_post":null,"next_post":{"title":"Golang-Grammar","url":"/posts/42803/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"包\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">包 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"包的基本使用\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\"> 包的基本使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"init 包初始化\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">init 包初始化</span></a></li></ol></li></ol>","categories":[{"name":"Golang","path":"api/categories/Golang.json","url":"/categories/Golang/"}],"tags":[{"name":"Golang","path":"api/tags/Golang.json","url":"/tags/Golang/"}]}