{"title":"SpringAop","slug":"boot_Aop","date":"2022-08-02","updated":"2023-01-13","comments":true,"path":"api/posts/21566.json","excerpt":"<blockquote><p> 介绍了关于 SpringBoot 的相关知识点 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>介绍了关于 SpringBoot 的相关知识点</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"通知\"><a href=\"# 通知\" class=\"headerlink\" title=\"通知\"></a>通知 </h1><h2 id=\"执行顺序\"><a href=\"# 执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a> 执行顺序</h2><blockquote>\n<p>环绕通知 -&gt; 前置通知 -&gt; 方法逻辑 -&gt; 返回通知(无异常) -&gt; 后置通知 -&gt; 环绕通知<br><img src = \"http://xtzl.wentexl.cn/%E9%80%9A%E7%9F%A5%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png\"></p>\n</blockquote>\n<h2 id=\"注解\"><a href=\"# 注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><blockquote>\n<ul>\n<li>环绕通知 @Around(“testCut()”)</li>\n<li>前置通知 @Before(“testCut()”)</li>\n<li>返回通知 @AfterReturning(value = “testCut()”, returning = “result”)</li>\n<li>异常通知 @AfterThrowing(value = “testCut()”, throwing = “e”)</li>\n<li>后置通知 @After(“testCut()”)</li>\n</ul>\n</blockquote>\n<h1 id=\"优先级\"><a href=\"# 优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h1><blockquote>\n<p>环绕通知可以决定切点方法内的业务逻辑是否执行 <br> 如果选择执行切点的话，则使用 joinPoint.proceed();<br>环绕通知的返回值就是最终返回给前端的返回值 <br> 即便执行了业务逻辑代码，若配置了环绕通知，返回给前端的仍然是环绕通知的 return</p>\n</blockquote>\n<h1 id=\"代码演示\"><a href=\"# 代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示 </h1><h2 id=\"自定义注解\"><a href=\"# 自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a> 自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义注解</span></span><br><span class=\"line\"><span class=\"comment\">//@Documented 注解，是被用来指定自定义注解是否能随着被定义的 java 文件生成到 JavaDoc 文档当中。</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"comment\">// 在运行时可被虚拟机保留, 通过反射可以读取到它</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span> <span class=\"comment\">// 限定了只能使用在方法上面</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AspectTest &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 里面可以放一些成属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义切面\"><a href=\"# 自定义切面\" class=\"headerlink\" title=\"自定义切面\"></a>自定义切面 </h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AspectTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里的路径填自定义注解的全路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(campus.epidemic.prevention.aspect.Annotations.AspectTest)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;testCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutProcess</span><span class=\"params\">(JoinPoint joinPoint)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 开始拦截, 当前拦截的方法名: &quot;</span> + method.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 环绕通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;testCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">testCutAround</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 拦截开始进入环绕通知.......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这里的 proceed 是指的指定切点(接口方法) 的返回值</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">proceed</span> <span class=\"operator\">=</span> joinPoint.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 准备退出环绕......&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * returning 属性指定连接点方法返回的结果放置在 result 变量中</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint 连接点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> result    返回结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回通知：必须无异常的时候才能执行</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;testCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 拦截的方法执行成功, 进入返回通知拦截, 方法名为: &quot;</span> + method.getName() + <span class=\"string\">&quot;, 返回结果为: &quot;</span> + result.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异常通知： 有异常的时候抛出</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = &quot;testCut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception e)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 进入方法异常拦截, 方法名为: &quot;</span> + method.getName() + <span class=\"string\">&quot;, 异常信息为: &quot;</span> + e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置通知: 无论是否有异常都必须执行</span></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;testCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">(JoinPoint joinPoint)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"comment\">// 方法名</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 执行的方法 :&quot;</span> + method.getName() + <span class=\"string\">&quot; 执行完了 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","url":"/posts/21566/","min2read":3,"word4post":702,"prev_post":{"title":"boot_Security.md","url":"/posts/29525/"},"next_post":{"title":"Transaction","url":"/posts/43132/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"通知\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">通知 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"执行顺序\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\"> 执行顺序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"注解\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">注解</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"优先级\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">优先级</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"代码演示\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">代码演示 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义注解\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\"> 自定义注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义切面\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\">自定义切面 </span></a></li></ol></li></ol>","categories":[{"name":"SpringBoot","path":"api/categories/SpringBoot.json","url":"/categories/SpringBoot/"}],"tags":[{"name":"SpringAop","path":"api/tags/SpringAop.json","url":"/tags/SpringAop/"}]}