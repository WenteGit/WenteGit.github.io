{"title":"SpringAop","slug":"boot_Aop","date":"2022-08-02","updated":"2023-01-17","comments":true,"path":"api/posts/21566.json","excerpt":"<blockquote><p> 介绍了关于 SpringBoot 的相关知识点 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>介绍了关于 SpringBoot 的相关知识点</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"通知\"><a href=\"# 通知\" class=\"headerlink\" title=\"通知\"></a>通知 </h1><h2 id=\"执行顺序\"><a href=\"# 执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a> 执行顺序</h2><blockquote>\n<p>环绕通知 -&gt; 前置通知 -&gt; 方法逻辑 -&gt; 返回通知(无异常) -&gt; 后置通知 -&gt; 环绕通知<br><img src = \"http://xtzl.wentexl.cn/%E9%80%9A%E7%9F%A5%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png\"></p>\n</blockquote>\n<h2 id=\"注解\"><a href=\"# 注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><blockquote>\n<ul>\n<li>环绕通知 @Around(“testCut()”)</li>\n<li>前置通知 @Before(“testCut()”)</li>\n<li>返回通知 @AfterReturning(value = “testCut()”, returning = “result”)</li>\n<li>异常通知 @AfterThrowing(value = “testCut()”, throwing = “e”)</li>\n<li>后置通知 @After(“testCut()”)</li>\n</ul>\n</blockquote>\n<h1 id=\"优先级\"><a href=\"# 优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h1><blockquote>\n<p>环绕通知可以决定切点方法内的业务逻辑是否执行 <br> 如果选择执行切点的话，则使用 joinPoint.proceed();<br>环绕通知的返回值就是最终返回给前端的返回值 <br> 即便执行了业务逻辑代码，若配置了环绕通知，返回给前端的仍然是环绕通知的 return</p>\n</blockquote>\n<h1 id=\"代码演示\"><a href=\"# 代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示 </h1><h2 id=\"自定义注解\"><a href=\"# 自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a> 自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义注解</span></span><br><span class=\"line\"><span class=\"comment\">//@Documented 注解，是被用来指定自定义注解是否能随着被定义的 java 文件生成到 JavaDoc 文档当中。</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"comment\">// 在运行时可被虚拟机保留, 通过反射可以读取到它</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span> <span class=\"comment\">// 限定了只能使用在方法上面</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AspectTest &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 里面可以放一些成属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义切面\"><a href=\"# 自定义切面\" class=\"headerlink\" title=\"自定义切面\"></a>自定义切面 </h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AspectTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里的路径填自定义注解的全路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(campus.epidemic.prevention.aspect.Annotations.AspectTest)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;testCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutProcess</span><span class=\"params\">(JoinPoint joinPoint)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 开始拦截, 当前拦截的方法名: &quot;</span> + method.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 环绕通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;testCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">testCutAround</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 拦截开始进入环绕通知.......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这里的 proceed 是指的指定切点(接口方法) 的返回值</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">proceed</span> <span class=\"operator\">=</span> joinPoint.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 准备退出环绕......&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * returning 属性指定连接点方法返回的结果放置在 result 变量中</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint 连接点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> result    返回结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回通知：必须无异常的时候才能执行</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;testCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 拦截的方法执行成功, 进入返回通知拦截, 方法名为: &quot;</span> + method.getName() + <span class=\"string\">&quot;, 返回结果为: &quot;</span> + result.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异常通知： 有异常的时候抛出</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = &quot;testCut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception e)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 进入方法异常拦截, 方法名为: &quot;</span> + method.getName() + <span class=\"string\">&quot;, 异常信息为: &quot;</span> + e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置通知: 无论是否有异常都必须执行</span></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;testCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">(JoinPoint joinPoint)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        <span class=\"comment\">// 方法名</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 注解方式 AOP 执行的方法 :&quot;</span> + method.getName() + <span class=\"string\">&quot; 执行完了 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AOP 实战切面\"><a href=\"#AOP 实战切面\" class=\"headerlink\" title=\"AOP 实战切面\"></a>AOP 实战切面</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Wente</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/1/13</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CacheAspect</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 由于所有线程都共享这一个组件中的 cache，所以需要考虑并发 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoadingCache&lt;String,Object&gt; cache ;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(campus.epidemic.prevention.aspect.Annotations.DoubleCache)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cacheAspect</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;Caffeine.expireAfterWrite&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long expireTime;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;Caffeine.maximumSize&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long maximumSize;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 反存逻辑已经在代码中体现，无须在 build 中指定 */</span></span><br><span class=\"line\">         cache = Caffeine.newBuilder().</span><br><span class=\"line\">            maximumSize(maximumSize).</span><br><span class=\"line\">            expireAfterWrite(expireTime,TimeUnit.SECONDS).</span><br><span class=\"line\">            build(<span class=\"keyword\">new</span> <span class=\"title class_\">CacheLoader</span>&lt;String, Object&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"meta\">@Nullable</span> Object <span class=\"title function_\">load</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> String s)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;cacheAspect()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Object <span class=\"title function_\">doAround</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature) point.getSignature();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> signature.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接解析 springEl 表达式的 map</span></span><br><span class=\"line\">        String[] paramNames = signature.getParameterNames();</span><br><span class=\"line\">        Object[] args = point.getArgs();</span><br><span class=\"line\">        TreeMap&lt;String, Object&gt; treeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; paramNames.length; i++) &#123;</span><br><span class=\"line\">            treeMap.put(paramNames[i],args[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">DoubleCache</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> method.getAnnotation(DoubleCache.class);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> ElParser.parse(annotation.key(), treeMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 一般来说都是针对一张表的操作，elResult 不为空，则为带条件的操作，如果 elResult 为空，则为操作整张表</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">realKey</span> <span class=\"operator\">=</span> annotation.cacheName() + <span class=\"string\">&quot;-&quot;</span> + key;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强制更新所有缓存 PUT</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (annotation.type()== CacheType.PUT)&#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> point.proceed();</span><br><span class=\"line\">            redisTemplate.opsForValue().set(realKey, object,annotation.l2TimeOut(), TimeUnit.SECONDS);</span><br><span class=\"line\">            cache.put(realKey, object);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除 DELETE</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (annotation.type()== CacheType.DELETE)&#123;</span><br><span class=\"line\">            redisTemplate.delete(realKey);</span><br><span class=\"line\">            cache.invalidate(realKey);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读写 PULL，查询 Caffeine(一级缓存)</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">caffeineCache</span> <span class=\"operator\">=</span> cache.getIfPresent(realKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.nonNull(caffeineCache)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;get data from caffeine&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caffeineCache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询 Redis(二级缓存)</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">redisCache</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(realKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.nonNull(redisCache)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;get data from redis&quot;</span>);</span><br><span class=\"line\">            cache.put(realKey, redisCache);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisCache;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;get data from database&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> point.proceed();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.nonNull(object))&#123;</span><br><span class=\"line\"><span class=\"comment\">// 更新二级缓存 Redis</span></span><br><span class=\"line\">            redisTemplate.opsForValue().set(realKey, object,annotation.l2TimeOut(), TimeUnit.SECONDS);</span><br><span class=\"line\"><span class=\"comment\">// 更新一级缓存 Caffeine</span></span><br><span class=\"line\">            cache.put(realKey, object);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","url":"/posts/21566/","min2read":5,"word4post":"1.1k","prev_post":{"title":"boot_Security.md","url":"/posts/29525/"},"next_post":{"title":"Transaction","url":"/posts/43132/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"通知\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">通知 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"执行顺序\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\"> 执行顺序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"注解\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">注解</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"优先级\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">优先级</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"代码演示\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">代码演示 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义注解\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\"> 自定义注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义切面\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\">自定义切面 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"AOP 实战切面\" href = \"#\"><span class=\"toc-number\">3.3.</span> <span class=\"toc-text\">AOP 实战切面</span></a></li></ol></li></ol>","categories":[{"name":"SpringBoot","path":"api/categories/SpringBoot.json","url":"/categories/SpringBoot/"}],"tags":[{"name":"SpringAop","path":"api/tags/SpringAop.json","url":"/tags/SpringAop/"}]}