{"title":"JavaNorms","slug":"JavaNorms","date":"2022-07-20","updated":"2022-07-20","comments":true,"path":"api/posts/17711.json","excerpt":"<blockquote><p> 在学习过程中，对一些常见的开发格式和开发规范，以及一些规范类进行了整理和总结 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>在学习过程中，对一些常见的开发格式和开发规范，以及一些规范类进行了整理和总结</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"规范类\"><a href=\"# 规范类\" class=\"headerlink\" title=\"规范类:\"></a>规范类:</h1><h2 id=\"POJO- 类\"><a href=\"#POJO- 类\" class=\"headerlink\" title=\"POJO 类\"></a>POJO 类 </h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Plain Ordinary Java Object&quot;，简单普通的 java 对象。主要用来指代那些没有遵循特定的 java 对象模型，约定或者框架的对象。</span><br><span class=\"line\"></span><br><span class=\"line\">POJO 的内在含义是指那些:</span><br><span class=\"line\"> 有一些 private 的参数作为对象的属性，然后针对每一个参数定义 get 和 set 方法访问的接口。</span><br><span class=\"line\">没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的 java 对象。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaBean\"><a href=\"#JavaBean\" class=\"headerlink\" title=\"JavaBean\"></a>JavaBean</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JavaBean 是一种 JAVA 语言写成的可重用组件。JavaBean 符合一定规范编写的 Java 类，不是一种技术，而是一种规范。大家针对这种规范，总结了很多开发技巧、工具函数。符合这种规范的类，可以被其它的程序员或者框架使用。</span><br><span class=\"line\">它的方法命名，构造及行为必须符合特定的约定:</span><br><span class=\"line\"><span class=\"code\">    · 所有属性为 private。</span></span><br><span class=\"line\"><span class=\"code\">    · 这个类必须有一个公共的缺省构造函数。即是提供无参数的构造器。</span></span><br><span class=\"line\"><span class=\"code\">    · 这个类的属性使用 getter 和 setter 来访问，其他方法遵从标准命名规范。</span></span><br><span class=\"line\"><span class=\"code\">    · 这个类应是可序列化的。实现 serializable 接口。</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">因为这些要求主要是靠约定而不是靠实现接口，所以许多开发者把 JavaBean 看作遵从特定命名约定的 POJO</span><br></pre></td></tr></table></figure>\n\n","url":"/posts/17711/","min2read":1,"word4post":380,"prev_post":null,"next_post":{"title":"S_Annotation","url":"/posts/54839/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"规范类\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">规范类:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"POJO- 类\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">POJO 类 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"JavaBean\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">JavaBean</span></a></li></ol></li></ol>","categories":[{"name":"JavaNorms","path":"api/categories/JavaNorms.json","url":"/categories/JavaNorms/"}],"tags":[{"name":"Java","path":"api/tags/Java.json","url":"/tags/Java/"}]}