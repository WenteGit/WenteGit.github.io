{"title":"Golang-Grammar","slug":"Golang-Grammar","date":"2024-01-15","updated":"2024-01-27","comments":true,"path":"api/posts/42803.json","excerpt":"<blockquote><p> 关于 Golang 的语法学习 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>关于 Golang 的语法学习</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"类型区分\"><a href=\"# 类型区分\" class=\"headerlink\" title=\"类型区分\"></a>类型区分 </h1><h2 id=\"值类型传递\"><a href=\"# 值类型传递\" class=\"headerlink\" title=\"值类型传递\"></a> 值类型传递</h2><blockquote>\n<p>概念：每次返回或拿到的都是一个新的值，修改新值不会影响到原值  </p>\n<ul>\n<li>int</li>\n<li>float</li>\n<li>string</li>\n<li>bool</li>\n<li>array</li>\n<li>struct</li>\n</ul>\n</blockquote>\n<h2 id=\"引用类型传递\"><a href=\"# 引用类型传递\" class=\"headerlink\" title=\"引用类型传递\"></a>引用类型传递</h2><blockquote>\n<p>概念：每次返回或拿到的都是指向原对象的内存地址的引用  </p>\n<ul>\n<li>slice</li>\n<li>map</li>\n<li>chan</li>\n</ul>\n</blockquote>\n<h1 id=\"变量与常量\"><a href=\"# 变量与常量\" class=\"headerlink\" title=\"变量与常量\"></a>变量与常量 </h1><h2 id=\"变量\"><a href=\"# 变量\" class=\"headerlink\" title=\"变量\"></a> 变量</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义变量后赋值，如果没有赋值，默认为 0，字符串的话默认为空串，数组的话默认为空数组。浮点值的默认也是 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 <span class=\"type\">int</span></span><br><span class=\"line\">num1 = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// 直接写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 <span class=\"type\">int</span> = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"comment\">// 类型推断，定义完成之后类型就确定好了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"comment\">// 简短声明，左侧变量至少得有一个是新的变量, 且不能定义全局变量</span></span><br><span class=\"line\">num4 := <span class=\"number\">40</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常量\"><a href=\"# 常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><blockquote>\n<p>常量组</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tUnknown = <span class=\"number\">0</span></span><br><span class=\"line\">\tFemale = <span class=\"number\">1</span></span><br><span class=\"line\">\tMale = <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>iota 默认为 0，表示 const 中定义的常量个数</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\ta = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tb = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tc = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果常量没有指定值，默认为上一行的值</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> (</span><br><span class=\"line\">a = <span class=\"literal\">iota</span>   <span class=\"comment\">//0</span></span><br><span class=\"line\">b          <span class=\"comment\">//1</span></span><br><span class=\"line\">c          <span class=\"comment\">//2</span></span><br><span class=\"line\">d = <span class=\"string\">&quot;ha&quot;</span>   <span class=\"comment\">// 独立值，iota += 1</span></span><br><span class=\"line\">e          <span class=\"comment\">//&quot;ha&quot;   iota += 1</span></span><br><span class=\"line\">f = <span class=\"number\">100</span>    <span class=\"comment\">//iota +=1</span></span><br><span class=\"line\">g          <span class=\"comment\">//100  iota +=1</span></span><br><span class=\"line\">h = <span class=\"literal\">iota</span>   <span class=\"comment\">//7, 恢复计数</span></span><br><span class=\"line\">i          <span class=\"comment\">//8</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"运算\"><a href=\"# 运算\" class=\"headerlink\" title=\"运算\"></a>运算 </h1><h2 id=\"按位运算\"><a href=\"# 按位运算\" class=\"headerlink\" title=\"按位运算\"></a> 按位运算</h2><ul>\n<li>按位与：&amp;，二元运算，全为 1 则为 1，其他都为 0</li>\n<li>按位或：|，二元运算，同位有 1 则为 1，全 0 则为 0</li>\n<li>异或运算：<ul>\n<li>^，二元运算，相同则为 0，不同则为 1</li>\n<li>^，一元运算，包括符号位在内，取反</li>\n</ul>\n</li>\n<li>移位运算<ul>\n<li>a &lt;&lt; 2，向左移 2 位，最低位补 0</li>\n<li>a &gt;&gt;2，a 向右移 2 位，最高位补符号位</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运算符优先级（从上到下）\"><a href=\"# 运算符优先级（从上到下）\" class=\"headerlink\" title=\"运算符优先级（从上到下）\"></a>运算符优先级（从上到下）</h2><ul>\n<li>~、!、++、– </li>\n<li>*、/、%、&lt;&lt;、&gt;&gt;、&amp;</li>\n<li>+、-、^</li>\n<li>==、!=、&lt;、&lt;=、&gt;=、&gt;</li>\n<li>&lt;-</li>\n<li>&amp;&amp;</li>\n<li>||</li>\n</ul>\n<h1 id=\"输入输出\"><a href=\"# 输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出 </h1><h2 id=\"占位符\"><a href=\"# 占位符\" class=\"headerlink\" title=\"占位符\"></a> 占位符</h2><ul>\n<li>%v，原样打出</li>\n<li>%T，打印类型</li>\n<li>%t，bool 类型</li>\n<li>%s，字符串类型</li>\n<li>%f，浮点数类型</li>\n<li>%d，十进制整数类型</li>\n<li>%b，二进制整数类型</li>\n<li>%o，八进制整数类型</li>\n<li>%x，十六进制整数类型<ul>\n<li>%x：0-9，a-f</li>\n<li>%X: 0-9，A-F</li>\n</ul>\n</li>\n<li>%c，字符类型</li>\n<li>%p，指针目标对象的内存地址 <h2 id=\"输入输出样式\"><a href=\"# 输入输出样式\" class=\"headerlink\" title=\"输入输出样式\"></a> 输入输出样式</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y <span class=\"type\">float64</span></span><br><span class=\"line\"><span class=\"comment\">// 读取键盘的输入，通过操作地址，赋值给 x 和 y   阻塞式</span></span><br><span class=\"line\">fmt.Scanln(&amp;x,&amp;y)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;x 的数值：%d，y 的数值：%f\\n&quot;</span>,x,y)</span><br><span class=\"line\">fmt.Scanf(<span class=\"string\">&quot;%d,%f&quot;</span>,&amp;x,&amp;y)</span><br><span class=\"line\"><span class=\"comment\">// 输出到终端</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;x:%d,y:%f\\n&quot;</span>,x,y)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"逻辑语句\"><a href=\"# 逻辑语句\" class=\"headerlink\" title=\"逻辑语句\"></a>逻辑语句</h1><h2 id=\"IF 语句\"><a href=\"#IF 语句\" class=\"headerlink\" title=\"IF 语句\"></a>IF 语句</h2><blockquote>\n<p>含初始化语句</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// num 只在 if 内可以用到，出了 if 则用不到</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> num := <span class=\"number\">4</span>;num&gt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 正数 &quot;</span>,num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> num ==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 为零 &quot;</span>,num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不含初始化语句</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num := <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> num&gt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"switch 语句\"><a href=\"#switch 语句\" class=\"headerlink\" title=\"switch 语句\"></a>switch 语句</h2><blockquote>\n<p>标准写法</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> num1 &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;num1 是 1&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>省略 switch 后的变量，默认是布尔值</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"literal\">true</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"literal\">false</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>case 匹配多个</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> letter = <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> letter &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;E&quot;</span>, <span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;O&quot;</span>, <span class=\"string\">&quot;U&quot;</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 该字母是元音 &quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 该字母不是元音 &quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>初始化语句</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> letter := <span class=\"string\">&quot;A&quot;</span>;letter &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;E&quot;</span>, <span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;O&quot;</span>, <span class=\"string\">&quot;U&quot;</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 该字母是元音 &quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 该字母不是元音 &quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>贯通后续的 case</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> a := <span class=\"number\">1</span>; a &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a=1&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 执行了贯穿 &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 如果 case2 中也有 fallthrough，该语句也会被执行 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环语句\"><a href=\"# 循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><h3 id=\"for 循环\"><a href=\"#for 循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><blockquote>\n<p>标准写法</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>省略分号，模拟 while 循环</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者如下</span></span><br><span class=\"line\">i := <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i &lt; <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"跳转语句\"><a href=\"# 跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h2><h3 id=\"goto 语句\"><a href=\"#goto 语句\" class=\"headerlink\" title=\"goto 语句\"></a>goto 语句</h3><blockquote>\n<p>指直接跳转到指定的代码中，注意 LOOP 标签后面的都属于 LOOP 中，所以一般标签写在函数的最后面，一般不推荐使用 goto 语句</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> LOOP</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 该行代码是执行不到的 &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">LOOP:</span><br><span class=\"line\">\tx += <span class=\"number\">1</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot; 该行代码是可以执行的，x 为：%d&quot;</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"随机数\"><a href=\"# 随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数 </h2><h3 id=\"时间戳\"><a href=\"# 时间戳\" class=\"headerlink\" title=\"时间戳\"></a> 时间戳</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 秒时间戳</span></span><br><span class=\"line\">\ttimeStamp := time.Now().Unix()</span><br><span class=\"line\">\t<span class=\"comment\">// 毫秒时间戳</span></span><br><span class=\"line\">\ttimeMillisecond := time.Now().UnixMilli()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(timeMillisecond)</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(timeStamp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成随机数\"><a href=\"# 生成随机数\" class=\"headerlink\" title=\"生成随机数\"></a>生成随机数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trand.Intn(<span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"复合类型\"><a href=\"# 复合类型\" class=\"headerlink\" title=\"复合类型\"></a>复合类型 </h1><h2 id=\"数组\"><a href=\"# 数组\" class=\"headerlink\" title=\"数组\"></a> 数组</h2><blockquote>\n<p>数组的基本定义</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 未赋值的情况下，默认为 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1[<span class=\"number\">1</span>] <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 下标为 0 赋值为 1，下标为 3 的地方赋值为 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">0</span>: <span class=\"number\">1</span>, <span class=\"number\">3</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数组实际存储的元素个数</span></span><br><span class=\"line\">realLen := <span class=\"built_in\">len</span>(arr1)</span><br><span class=\"line\"><span class=\"comment\">// 数组最大可存储的元素个数</span></span><br><span class=\"line\">maxLen := <span class=\"built_in\">cap</span>(arr1)</span><br><span class=\"line\">fmt.Print(realLen)</span><br><span class=\"line\">fmt.Print(maxLen)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组的 range 打印</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> arr2 &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot; 下标为：%d &quot;</span>, index)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot; 值为：%d&quot;</span>, value)</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 舍弃下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> arr2 &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot; 值为：%d&quot;</span>, val)</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组的复制 <br> 数组的复制是深拷贝，修改 arr3 不会影响到 arr2</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr3 = arr2</span><br><span class=\"line\">\tarr3[<span class=\"number\">0</span>] = <span class=\"number\">9</span></span><br><span class=\"line\">\tfmt.Println(arr2)</span><br><span class=\"line\">\tfmt.Println(arr3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组的比较 <br> 先比较数组长度和类型，然后依次比较数组中的值，及其顺序，是否都相同</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr2 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr3 = arr2</span><br><span class=\"line\">\tfmt.Print(arr3 == arr2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组元素的交换 <br> 冒泡排序</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr3 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(arr3); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(arr3)-i<span class=\"number\">-1</span>; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> arr3[j] &gt; arr3[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 交换位置</span></span><br><span class=\"line\">\t\t\t\tarr3[j], arr3[j+<span class=\"number\">1</span>] = arr3[j+<span class=\"number\">1</span>], arr3[j]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(arr3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>二维数组</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义，默认值都为 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 [<span class=\"number\">3</span>][<span class=\"number\">2</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"comment\">// 定义并赋值</span></span><br><span class=\"line\">arr := [<span class=\"number\">3</span>][<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"切片\"><a href=\"# 切片\" class=\"headerlink\" title=\"切片\"></a>切片</h2><blockquote>\n<p>定义如下，不在 [] 中写长度，则表示切片，切片本身不存数据，存数据的是底层的变长数组</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> slice []<span class=\"type\">int</span></span><br><span class=\"line\">slice[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s2 := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">fmt.Println(s2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数表示创建的切片初始化为 0 的元素个数，第二个参数表示该切片目前设置的最大容量</span></span><br><span class=\"line\">s1 := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">// 如果添加的元素过多超过定义的原容量，容量就会自动扩容到原来的 2 倍，会开辟新的空间分配内存地址，则 s1 需要指向新的地址</span></span><br><span class=\"line\">s1 = <span class=\"built_in\">append</span>(s1, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>切片中添加其他切片</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">s1 = <span class=\"built_in\">append</span>(s1, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">s2 := []<span class=\"type\">int</span>&#123;<span class=\"number\">9</span>,<span class=\"number\">9</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">s1 = <span class=\"built_in\">append</span>(s1, s2...)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从已有的数组中直接创建切片，操作切片也会影响到已有的数组  </p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tarr := [<span class=\"number\">10</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 取下标 2&lt;=x&lt;4 的元素</span></span><br><span class=\"line\">\tslice := arr[<span class=\"number\">2</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">\tfmt.Println(slice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>切片超过原数组的右边界</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tarr := [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 取下标 2&lt;=x&lt;4 的元素</span></span><br><span class=\"line\">\tslice := arr[<span class=\"number\">2</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">\t<span class=\"comment\">// 如果添加的元素未超过数组的右边界，则会改变原数组的值</span></span><br><span class=\"line\">\tslice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">9</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 继续添加元素，直到超过数组的右边界，则会复制切片的数据，并重新开辟一个新的空间</span></span><br><span class=\"line\">\tslice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">9</span>)</span><br><span class=\"line\">\tfmt.Println(slice)</span><br><span class=\"line\">\tfmt.Println(arr)</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>切片的复制，是引用类型的复制，属于浅拷贝</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts1 := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\ts2 := s1</span><br><span class=\"line\">\tfmt.Println(s1,s2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>切片的深拷贝</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts1 := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 第二个参数必须大于等于需要 copy 的元素个数</span></span><br><span class=\"line\">\ts2 := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(s1), <span class=\"built_in\">len</span>(s1))</span><br><span class=\"line\">\ts3 := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(s1)<span class=\"number\">-1</span>, <span class=\"built_in\">len</span>(s1)<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(s2, s1)</span><br><span class=\"line\">\t<span class=\"comment\">// 部分拷贝</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(s3, s2[:<span class=\"number\">2</span>])</span><br><span class=\"line\">\tfmt.Println(s3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map 集合\"><a href=\"#Map 集合\" class=\"headerlink\" title=\"Map 集合\"></a>Map 集合</h2><blockquote>\n<p>Map 的定义与创建</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个空引用，没分配实际的存储地址，所以无法使用，也就是说 maap1=nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> map1 <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// 分配实际空间</span></span><br><span class=\"line\">\tmap2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 直接初始化</span></span><br><span class=\"line\">\tmap3 := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;<span class=\"string\">&quot;Go&quot;</span>: <span class=\"number\">100</span>, <span class=\"string\">&quot;Java&quot;</span>: <span class=\"number\">100</span>, <span class=\"string\">&quot;C++&quot;</span>: <span class=\"number\">90</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Map 的元素返回</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmap1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tmap1[<span class=\"string\">&quot;test&quot;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tval, exist := map1[<span class=\"string\">&quot;test&quot;</span>]</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;key 为 %d, val 为 %t&quot;</span>, val, exist)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Map 元素的删除</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmap1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tmap1[<span class=\"string\">&quot;test&quot;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(map1, <span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(map1))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>遍历 Map 集合</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmap1 := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;<span class=\"string\">&quot;Golang&quot;</span>: <span class=\"number\">100</span>, <span class=\"string\">&quot;Java&quot;</span>: <span class=\"number\">100</span>, <span class=\"string\">&quot;C++&quot;</span>: <span class=\"number\">90</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, val := <span class=\"keyword\">range</span> map1 &#123;</span><br><span class=\"line\">\t\tfmt.Print(<span class=\"string\">&quot;key:&quot;</span> + key + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;val: %d&quot;</span>, val)</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Map 与切片的结合</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuserList := <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tuserList = <span class=\"built_in\">append</span>(userList, <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot; 谢特智力 &quot;</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"# 字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串 </h2><h3 id=\"字符串的定义\"><a href=\"# 字符串的定义\" class=\"headerlink\" title=\"字符串的定义\"></a> 字符串的定义</h3><blockquote>\n<p>顺序访问到的是单字节</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;abcd&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, va := <span class=\"keyword\">range</span> str &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 打印出来的是英文字符的 ASCALL 码</span></span><br><span class=\"line\">\t\tfmt.Print(va)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstr2 := <span class=\"string\">&quot; 谢特智力 &quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 打印结果是 12，一个中文字符占三个字节</span></span><br><span class=\"line\">\tfmt.Print(<span class=\"built_in\">len</span>(str2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符串是字节的集合</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tslice := []<span class=\"type\">byte</span>&#123;<span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 字节切片转换成字符串</span></span><br><span class=\"line\">\tstr := <span class=\"type\">string</span>(slice)</span><br><span class=\"line\">\t<span class=\"comment\">// 字符串转换成切片</span></span><br><span class=\"line\">\tslice2 := []<span class=\"type\">byte</span>(str)</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历新字节切片</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> slice2 &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符串的内容无法被修改</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 会报错</span></span><br><span class=\"line\">\tstr[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;B&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串包的使用\"><a href=\"# 字符串包的使用\" class=\"headerlink\" title=\"字符串包的使用\"></a>字符串包的使用</h3><blockquote>\n<p>子串的 API</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;abcda&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.Contains(str, <span class=\"string\">&quot;abc&quot;</span>) &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;str 中包括了整个子串 &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.ContainsAny(str, <span class=\"string\">&quot;efga&quot;</span>) &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;str 中包括了子串中的某一个字符，中文字符也可 &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算整个子串在 str 中出现的频次</span></span><br><span class=\"line\">\tcountSubstr := strings.Count(str, <span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(countSubstr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasPrefix(str, <span class=\"string\">&quot;ab&quot;</span>) &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;str 中有 \\&quot;ab\\&quot; 这个子串前缀 &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 子串整体第一次出现的下标</span></span><br><span class=\"line\">\tfistIndex := strings.Index(str, <span class=\"string\">&quot;abc&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 子串中任一字符第一次出现的下标，取最小下标</span></span><br><span class=\"line\">\tanyIndex := strings.IndexAny(str, <span class=\"string\">&quot;efba&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 子串整体第一次出现的下标，如果没有，则返回 -1</span></span><br><span class=\"line\">\tlastIndex := strings.LastIndex(str, <span class=\"string\">&quot;e&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符串的分隔与拼接</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串切片组成一个新的字符串</span></span><br><span class=\"line\">\tstrArr := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&quot;ghi&quot;</span>&#125;</span><br><span class=\"line\">\tjoiStr := strings.Join(strArr, <span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 输出结果是 abc,def,ghi</span></span><br><span class=\"line\">\tfmt.Println(joiStr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符串的分隔</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;abc,edf,hig&quot;</span></span><br><span class=\"line\">\tstrArr := strings.Split(str, <span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(strArr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符串的重复拼接与替换</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">\tstrs := strings.Repeat(str, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tfmt.Println(strs)</span><br><span class=\"line\">\tnewStr := strings.ReplaceAll(str, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;d&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(newStr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>大小写转换</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">\tupperStr := strings.ToUpper(str)</span><br><span class=\"line\">\tlowerStr := strings.ToLower(upperStr)</span><br><span class=\"line\">\tfmt.Println(upperStr)</span><br><span class=\"line\">\tfmt.Println(lowerStr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符串的截取，与切片是同一操作</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot; 谢特智力 &quot;</span></span><br><span class=\"line\">\tsubStr := str[:<span class=\"number\">6</span>]</span><br><span class=\"line\">\tstrEn := <span class=\"string\">&quot;wente&quot;</span></span><br><span class=\"line\">\tsubStrEn := strEn[:<span class=\"number\">3</span>]</span><br><span class=\"line\">\tfmt.Println(subStr)</span><br><span class=\"line\">\tfmt.Print(subStrEn)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符串与基础类型的转换</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 字符串类型转布尔类型</span></span><br><span class=\"line\">\tboolStr, err := strconv.ParseBool(str)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 转换成功！&quot;</span>)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot; 转换结果为：%t\\n&quot;</span>, boolStr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 布尔类型转字符串类型</span></span><br><span class=\"line\">\tstrBool := strconv.GBool(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\tfmt.Println(strBool)</span><br><span class=\"line\">\t<span class=\"comment\">// ----------------------- 与 int 的转换 ------</span></span><br><span class=\"line\">\tintStr, err2 := strconv.Atoi(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 转换成功 &quot;</span>)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot; 转换结果为：%d\\n&quot;</span>, intStr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// int 转字符串</span></span><br><span class=\"line\">\tstrInt := strconv.Itoa(intStr)</span><br><span class=\"line\">\tfmt.Println(strInt)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"# 函数\" class=\"headerlink\" title=\"函数\"></a>函数 </h1><h2 id=\"函数的定义与使用\"><a href=\"# 函数的定义与使用\" class=\"headerlink\" title=\"函数的定义与使用\"></a> 函数的定义与使用</h2><blockquote>\n<p>函数的定义</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tres1, res2 := funcName(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Print(res1)</span><br><span class=\"line\">\tfmt.Print(res2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">入参为 param，类型为 int</span></span><br><span class=\"line\"><span class=\"comment\">返回值可以有多个，这里的返回值有两个</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName</span><span class=\"params\">(param <span class=\"type\">int</span>)</span></span> (<span class=\"type\">int</span>,  <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tres1 := param + <span class=\"number\">1</span></span><br><span class=\"line\">\tres2 := param - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res1, res2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** 另一种返回方式，需要返回的结果在方法签名的返回值区域定义 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> (sum <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tsum = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可变参数入参</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(getSum(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 可用切片作为可变参数的入参</span></span><br><span class=\"line\">\tslice := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tfmt.Println(getSum(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>, slice...))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不止有可变参数，则可变参数需要放到参数列表的最后，</span></span><br><span class=\"line\"><span class=\"comment\">// 一个函数的参数列表只能有一个可变参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getSum</span><span class=\"params\">(s1, s2 <span class=\"type\">string</span>, nums ...<span class=\"type\">int</span>)</span></span> (result <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tfmt.Println(s1)</span><br><span class=\"line\">\tfmt.Println(s2)</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\tsum += v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>函数也是个指针变量</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span></span><br><span class=\"line\">\tc := test</span><br><span class=\"line\">\tb = test</span><br><span class=\"line\">\tc(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tb(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(param <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Print(param)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"defer 函数的使用\"><a href=\"#defer 函数的使用\" class=\"headerlink\" title=\"defer 函数的使用\"></a>defer 函数的使用</h2><blockquote>\n<p>用于函数的延迟执行，defer 的执行顺序是栈的思想，先延迟的后执行，后延迟的先执行</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot; 主函数执行 &quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> deferTestOne()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 主函数继续执行 &quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> deferTestTwo()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 主函数执行完毕 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferTestOne</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 第一个延迟函数执行 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferTestTwo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 第二个延迟函数执行 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>无论参数类型是值传递还是引用传递，defer 函数的参数都不会因为主函数在 defer 函数后的语句对原参数的改变而改变</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot; 主函数执行 &quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> deferTestOne(a, b)</span><br><span class=\"line\">\ta++</span><br><span class=\"line\">\tb = <span class=\"built_in\">append</span>(b, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot; 切片 b 的元素个数为：%d\\n&quot;</span>, <span class=\"built_in\">len</span>(b))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行到 defer 的时候，传参就已经确定了，原参数在主函数后面的改变，不会改变执行到此刻的传参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferTestOne</span><span class=\"params\">(param <span class=\"type\">int</span>, param2 []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tparam2 = <span class=\"built_in\">append</span>(param2, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot; 延迟函数 1：切片 b 的元素个数为：%d\\n&quot;</span>, <span class=\"built_in\">len</span>(param2))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 第一个延迟函数执行，传参为：&quot;</span> + strconv.Itoa(param))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高级函数的使用\"><a href=\"# 高级函数的使用\" class=\"headerlink\" title=\"高级函数的使用\"></a>高级函数的使用</h2><blockquote>\n<p>匿名函数的使用</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义带参但是无返回值的匿名函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(p1 <span class=\"type\">int</span>, p2 <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 参数 1：&quot;</span> + strconv.Itoa(p1))</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 参数 2：&quot;</span> + strconv.Itoa(p2))</span><br><span class=\"line\">\t&#125;(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 带返回值的匿名函数定义，并用 f1 作为一个函数变量来接收</span></span><br><span class=\"line\">\tf1 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(p1 <span class=\"type\">int</span>, p2 <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p1 + p2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 带返回值的匿名函数调用，并用 res1 接收返回值</span></span><br><span class=\"line\">\tres1 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(p1 <span class=\"type\">int</span>, p2 <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p1 + p2</span><br><span class=\"line\">\t&#125;(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tfmt.Println(res1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>回调函数的使用</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tres := oper(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a <span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a * b</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot; 结果是：&quot;</span> + strconv.Itoa(res))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用回调函数来进行乘法操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">oper</span><span class=\"params\">(a <span class=\"type\">int</span>, b <span class=\"type\">int</span>, fun <span class=\"keyword\">func</span>(a <span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a == <span class=\"number\">0</span> || b == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行完 if 的检查逻辑之后，执行回调函数逻辑</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fun(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>闭包的使用  </p>\n<ul>\n<li>闭包的定义：内层函数以及外层函数被内层函数所使用的变量，统称为闭包  </li>\n<li>闭包的生命周期不随外层函数的消失而消失  </li>\n<li>外层函数的返回值就是内层函数，且内层函数使用了外层函数定义的变量，才会形成闭包</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\to1 := outside()</span><br><span class=\"line\">\tfmt.Println(o1())</span><br><span class=\"line\">\tfmt.Println(o1())</span><br><span class=\"line\">\tfmt.Println(o1())</span><br><span class=\"line\">\t<span class=\"comment\">// 每次重新调用外层函数都会重新生成一个闭包</span></span><br><span class=\"line\">\to2 := outside()</span><br><span class=\"line\">\tfmt.Println(o2())</span><br><span class=\"line\">\tfmt.Println(o2())</span><br><span class=\"line\">\tfmt.Println(o2())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外层函数返回值是内层函数类型，且内层函数操作了外层函数的变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">outside</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">0</span></span><br><span class=\"line\">\tf1 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\ta++</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指针\"><a href=\"# 指针\" class=\"headerlink\" title=\"指针\"></a>指针 </h1><h2 id=\"变量指针\"><a href=\"# 变量指针\" class=\"headerlink\" title=\"变量指针\"></a> 变量指针</h2><blockquote>\n<p>指针的定义：存储了另一个变量的内存地址</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> aPoint *<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// 指针指向 a 的内存地址</span></span><br><span class=\"line\">\taPoint = &amp;a</span><br><span class=\"line\">\t<span class=\"comment\">// 打印指针指向的内存地址的存放的值</span></span><br><span class=\"line\">\tfmt.Println(*aPoint)</span><br><span class=\"line\">\t<span class=\"comment\">// 打印出来的是 a 的内存地址</span></span><br><span class=\"line\">\tfmt.Println(aPoint)</span><br><span class=\"line\">\t<span class=\"comment\">// 通过指针改变变量的值</span></span><br><span class=\"line\">\t*aPoint = <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 指针的指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ap2 **<span class=\"type\">int</span></span><br><span class=\"line\">\tap2 = &amp;aPoint</span><br><span class=\"line\">\tfmt.Println(**ap2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组指针\"><a href=\"# 数组指针\" class=\"headerlink\" title=\"数组指针\"></a>数组指针</h2><blockquote>\n<p>数组指针：指针指向一个数组</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tarr := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义数组指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p *[<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tp = &amp;arr</span><br><span class=\"line\">\t<span class=\"comment\">// 根据数组指针修改数组的值，两种写法均可</span></span><br><span class=\"line\">\t(*p)[<span class=\"number\">0</span>] = <span class=\"number\">9</span></span><br><span class=\"line\">\tp[<span class=\"number\">0</span>] = <span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>指针数组：数组里装的都是指针</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\tb := <span class=\"number\">1</span></span><br><span class=\"line\">\tc := <span class=\"number\">1</span></span><br><span class=\"line\">\tarr := [<span class=\"number\">3</span>]*<span class=\"type\">int</span>&#123;&amp;a, &amp;b, &amp;c&#125;</span><br><span class=\"line\">\tfmt.Println(*arr[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>指针函数，这里的数组是不会被销毁的，应该是闭包的应用吧</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tarrPoint := f1()</span><br><span class=\"line\">\tfmt.Println(*arrPoint)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span> *[<span class=\"number\">3</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;[<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构体\"><a href=\"# 结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体 </h1><h2 id=\"结构体初识\"><a href=\"# 结构体初识\" class=\"headerlink\" title=\"结构体初识\"></a> 结构体初识</h2><blockquote>\n<p>结构体的简单定义返回的是普通的结构体变量，普通的结构体变量是值传递</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明式</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wente Person</span><br><span class=\"line\">\twente.name = <span class=\"string\">&quot; 谢特智力 &quot;</span></span><br><span class=\"line\">\twente.age = <span class=\"number\">22</span></span><br><span class=\"line\">\twente.sex = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\">// 按顺序赋值</span></span><br><span class=\"line\">\twendy := Person&#123;<span class=\"string\">&quot; 温迪 &quot;</span>, <span class=\"number\">2000</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\tfmt.Println(wendy)</span><br><span class=\"line\">\t<span class=\"comment\">// 自定义赋值</span></span><br><span class=\"line\">\tyuxi := Person&#123;</span><br><span class=\"line\">\t\tname: <span class=\"string\">&quot; 玉溪 &quot;</span>,</span><br><span class=\"line\">\t\tage:  <span class=\"number\">11</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义但不赋值</span></span><br><span class=\"line\">\tp2 := Person&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(yuxi)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage  <span class=\"type\">int</span></span><br><span class=\"line\">\tsex  <span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结构体的指针定义</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// p1 如果不赋值的情况下，属性都拥有其类型的初始值，而不是 nil</span></span><br><span class=\"line\">\t<span class=\"comment\">// new 字段返回的是一个指针变量</span></span><br><span class=\"line\">\tp1 := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">\t<span class=\"comment\">// 本来应该是 *p1.name=&quot; 谢特智力 &quot;，但是结构体指针比较特殊，可以简写为如下</span></span><br><span class=\"line\">\tp1.name = <span class=\"string\">&quot; 谢特智力 &quot;</span></span><br><span class=\"line\">\tfmt.Println(*p1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage  <span class=\"type\">int</span></span><br><span class=\"line\">\tsex  <span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"结构体的深入浅出\"><a href=\"# 结构体的深入浅出\" class=\"headerlink\" title=\"结构体的深入浅出\"></a>结构体的深入浅出</h2><blockquote>\n<p>深拷贝和浅拷贝的实现</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 按顺序赋值</span></span><br><span class=\"line\">\twendy := Person&#123;<span class=\"string\">&quot; 温迪 &quot;</span>, <span class=\"number\">2000</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>, &amp;wendy)</span><br><span class=\"line\">\t<span class=\"comment\">// 深拷贝</span></span><br><span class=\"line\">\twente := wendy</span><br><span class=\"line\">\t<span class=\"comment\">// 与 wendy 不一样</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>, &amp;wente)</span><br><span class=\"line\">\t<span class=\"comment\">// 浅拷贝的实现</span></span><br><span class=\"line\">\twp := &amp;wendy</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>, wp)</span><br><span class=\"line\">\tfmt.Println(*wp)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage  <span class=\"type\">int</span></span><br><span class=\"line\">\tsex  <span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结构体的匿名定义</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts1 := <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"type\">string</span></span><br><span class=\"line\">\t\tage  <span class=\"type\">int</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tname: <span class=\"string\">&quot; 谢特智力 &quot;</span>,</span><br><span class=\"line\">\t\tage:  <span class=\"number\">22</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(s1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结构体的匿名字段：默认使用数据类型作为名字，但是同一个结构体内部的类型不能重复</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span></span><br><span class=\"line\">\t<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结构体的嵌套</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">\tp1.name = <span class=\"string\">&quot; 文特 &quot;</span></span><br><span class=\"line\">\tp1.Book = Book&#123;<span class=\"string\">&quot; 红楼梦 &quot;</span>, <span class=\"number\">29.9</span>&#125;</span><br><span class=\"line\">\tfmt.Println(*p1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tBook Book</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Book <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname  <span class=\"type\">string</span></span><br><span class=\"line\">\tprice <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过匿名结构体，模拟继承关系  </p>\n<ul>\n<li>子类可以访问父类的字段  </li>\n<li>子类可以访问父类已有的方法  </li>\n<li>子类可以重写父类的字段和方法  </li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstu := <span class=\"built_in\">new</span>(Student)</span><br><span class=\"line\">\tstu.name = <span class=\"string\">&quot; 文特 &quot;</span></span><br><span class=\"line\">\tstu.work()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Human 父类</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Student 子类</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 匿名结构体中的字段叫做提升字段，可以直接被访问</span></span><br><span class=\"line\">\tHuman</span><br><span class=\"line\">\tstuId <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 父类的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(human Human)</span></span> work() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Human 在工作！名字是：&quot;</span> + human.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu Student)</span></span> work() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Student 在工作！名字是：&quot;</span> + stu.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定义方法，方法是被结构体所拥有的</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := <span class=\"built_in\">new</span>(Human)</span><br><span class=\"line\">\tp1.name = <span class=\"string\">&quot; 谢特智力 &quot;</span></span><br><span class=\"line\">\tp1.work()</span><br><span class=\"line\">\tp1.rest()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体的指针变量会直接影响到调用者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(human *Human)</span></span> work() &#123;</span><br><span class=\"line\">\tfmt.Println(human.name + <span class=\"string\">&quot; 在工作！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体变量会复制一份给 human，这里是值传递数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(human Human)</span></span> rest() &#123;</span><br><span class=\"line\">\tfmt.Println(human.name + <span class=\"string\">&quot; 在休息！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"接口\"><a href=\"# 接口\" class=\"headerlink\" title=\"接口\"></a>接口 </h1><h2 id=\"接口初识\"><a href=\"# 接口初识\" class=\"headerlink\" title=\"接口初识\"></a> 接口初识</h2><blockquote>\n<p>接口的定义与基本使用</p>\n<ul>\n<li>具有多态的性质</li>\n<li>接口对象不能访问实现类的属性</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm1 := <span class=\"built_in\">new</span>(Mouse)</span><br><span class=\"line\">\tm1.name = <span class=\"string\">&quot; 罗技鼠标 &quot;</span></span><br><span class=\"line\">\ttest(m1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> USB <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tstart()</span><br><span class=\"line\">\tend()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口的实现类</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mouse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体的实现方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mouse *Mouse)</span></span> start() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;USB 启动，连接对象为：&quot;</span> + mouse.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mouse *Mouse)</span></span> end() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;USB 关闭，连接对象为：&quot;</span> + mouse.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(usb USB)</span></span> &#123;</span><br><span class=\"line\">\tusb.start()</span><br><span class=\"line\">\tusb.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口的应用\"><a href=\"# 接口的应用\" class=\"headerlink\" title=\"接口的应用\"></a>接口的应用</h2><blockquote>\n<p>空接口的使用，常用于传参使用</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj Object = <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"type\">string</span></span><br><span class=\"line\">\t\tage  <span class=\"type\">int</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot; 文特 &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">22</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttest(obj)</span><br><span class=\"line\">\t<span class=\"comment\">// 空接口类型的 slice</span></span><br><span class=\"line\">\tslice := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tslice = <span class=\"built_in\">append</span>(slice, <span class=\"string\">&quot; 文特 &quot;</span>, <span class=\"number\">22</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"number\">66.66</span>)</span><br><span class=\"line\">\ttestSlice(slice)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 空接口的外部定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Object <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(object Object)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(object)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 空接口类型的数据：任意类型的数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testSlice</span><span class=\"params\">(slice []<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(slice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接口的嵌套与继承</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tw1 := <span class=\"built_in\">new</span>(Worker)</span><br><span class=\"line\">\ttest(w1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> interA <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\trest()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> interB <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tinterA</span><br><span class=\"line\">\twork()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Worker <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(worker Worker)</span></span> work() &#123;</span><br><span class=\"line\">\tfmt.Println(worker.name + <span class=\"string\">&quot; 正在工作 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(worker Worker)</span></span> rest() &#123;</span><br><span class=\"line\">\tfmt.Println(worker.name + <span class=\"string\">&quot; 正在休息 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(ib interB)</span></span> &#123;</span><br><span class=\"line\">\tib.work()</span><br><span class=\"line\">\tib.rest()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接口的断言的使用</p>\n<ul>\n<li>断言的时候，指针类型和值类型不是一回事</li>\n<li>感觉类似用 instance of 来判断类型</li>\n<li>鼠标放在结构体上，用 Ctrl + i 然后输入接口的名称，可以快速生成接口的实现方法</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 给个三角形数据</span></span><br><span class=\"line\">\tt1 := <span class=\"built_in\">new</span>(Triangle)</span><br><span class=\"line\">\tt1.base = <span class=\"number\">2</span></span><br><span class=\"line\">\tt1.high = <span class=\"number\">2.5</span></span><br><span class=\"line\">\t<span class=\"comment\">// 给个圆形数据</span></span><br><span class=\"line\">\tr1 := <span class=\"built_in\">new</span>(Round)</span><br><span class=\"line\">\tr1.radius = <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 测试</span></span><br><span class=\"line\">\ttest(t1)</span><br><span class=\"line\">\tswitchTest(r1)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Shape 形状接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shape <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tgetArea() <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Triangle 三角形实现类</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Triangle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbase <span class=\"type\">float64</span></span><br><span class=\"line\">\thigh <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Triangle)</span></span> getArea() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t.base * t.high</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Round 圆形实现类</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Round <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tradius <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r Round)</span></span> getArea() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Pi * r.radius * r.radius</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 断言测试函数：if 的实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(shape Shape)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 断言的时候，指针类型和值类型不是一回事</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ins, ok := shape.(*Triangle); ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 该形状是三角形，面积为：&quot;</span> + strconv.FormatFloat(ins.getArea(), <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">2</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ins, ok := shape.(*Round); ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 该形状是圆形，面积为：&quot;</span> + strconv.FormatFloat(ins.getArea(), <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">2</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 我也不知道了 &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 断言测试函数：switch 的实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">switchTest</span><span class=\"params\">(shape Shape)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的 type 关键字在 switch 语句中才具有意义，它用于匹配接口的动态类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> ins := shape.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> *Triangle:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 该形状是三角形，面积为：&quot;</span> + strconv.FormatFloat(ins.getArea(), <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">2</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> *Round:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 该形状是圆形，面积为：&quot;</span> + strconv.FormatFloat(ins.getArea(), <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">2</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 未知形状！&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Type 的使用\"><a href=\"#Type 的使用\" class=\"headerlink\" title=\"Type 的使用\"></a>Type 的使用 </h1><h2 id=\"自定义类型\"><a href=\"# 自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a> 自定义类型</h2><blockquote>\n<p>在这语法上，自定义类型和经典类型不是一回事，这里是弄了一个新类型</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i1 myint</span><br><span class=\"line\">\ti1 = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i2 <span class=\"type\">int</span></span><br><span class=\"line\">\ti2 = <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 无法直接将 i2 赋值给 i1</span></span><br><span class=\"line\">\ti1 = i2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> myint <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>起别名，但是可以通用,Go1.9 之后引入</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> myint = <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义函数类型\"><a href=\"# 自定义函数类型\" class=\"headerlink\" title=\"自定义函数类型\"></a>自定义函数类型</h2><blockquote>\n<p>自定义返回的函数的类型</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\taddF := getAddFun()</span><br><span class=\"line\">\tres := addF(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自定义函数类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> myfun <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"comment\">// 得到一个加法函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getAddFun</span><span class=\"params\">()</span></span> myfun &#123;</span><br><span class=\"line\">\tf := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i1 <span class=\"type\">int</span>, i2 <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i1 + i2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>结构体中嵌入结构体</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts1 := <span class=\"built_in\">new</span>(Student)</span><br><span class=\"line\">\ts1.Person.name = <span class=\"string\">&quot; 谢特智力 &quot;</span></span><br><span class=\"line\">\ts1.People.name = <span class=\"string\">&quot; 文特 &quot;</span></span><br><span class=\"line\">\ts1.People.show1()</span><br><span class=\"line\">\ts1.Person.show2()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// People 起一个类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> People = Person</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Student 结构体中嵌套其他结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tPeople</span><br><span class=\"line\">\tPerson</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 别名和本名分别定义不同的实现函数，函数名不能相同</span></span><br><span class=\"line\"><span class=\"comment\">// 个人认为这样做有点脱裤子放屁的感觉。。。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p1 People)</span></span> show1() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;People：&quot;</span> + p1.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p2 Person)</span></span> show2() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Person：&quot;</span> + p2.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Error 的使用\"><a href=\"#Error 的使用\" class=\"headerlink\" title=\"Error 的使用\"></a>Error 的使用 </h1><h2 id=\"初识 Error\"><a href=\"# 初识 Error\" class=\"headerlink\" title=\"初识 Error\"></a> 初识 Error</h2><blockquote>\n<p>新建 Error</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te1 := errors.New(<span class=\"string\">&quot; 错误已经发生 &quot;</span>)</span><br><span class=\"line\">\tfmt.Println(e1)</span><br><span class=\"line\">\te2 := fmt.Errorf(<span class=\"string\">&quot; 错误的信息码为：%d&quot;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">\tfmt.Println(e2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看错误的详细信息\"><a href=\"# 查看错误的详细信息\" class=\"headerlink\" title=\"查看错误的详细信息\"></a>查看错误的详细信息</h2><blockquote>\n<p>文件打开错误</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfile, err := os.Open(<span class=\"string\">&quot;text.txt&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ins, ok := err.(*os.PathError); ok &#123;</span><br><span class=\"line\">\t\t\tpath := ins.Path</span><br><span class=\"line\">\t\t\top := ins.Op</span><br><span class=\"line\">\t\t\terrMsg := ins.Err</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;path:&quot;</span>, path)</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;op:&quot;</span>, op)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 系统找不到 specified 文件</span></span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;errMsg:&quot;</span>, errMsg)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(file.Name(), <span class=\"string\">&quot; 打开成功！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>DNS 错误</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\taddr, err := net.LookupHost(<span class=\"string\">&quot;www.textxtzl.com&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 错误断言，判断是否是 DNSError</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ins, ok := err.(*net.DNSError); ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ins.IsTimeout &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot; 超时错误 &quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ins.IsNotFound &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot; 访问丢失错误 &quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ins.IsTemporary &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot; 临时性错误 &quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;addr 为：&quot;</span>, addr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>精准匹配错误</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//dir := &quot;../wente/txts&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">//pattern := filepath.Join(dir, &quot;*.txt&quot;)</span></span><br><span class=\"line\">\tfilePaths, err := filepath.Glob(<span class=\"string\">&quot;[&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; errors.Is(err, filepath.ErrBadPattern) &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot; 文件映射路径错误！&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 打印文件路径列表</span></span><br><span class=\"line\">\tfmt.Println(filePaths)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义错误\"><a href=\"# 自定义错误\" class=\"headerlink\" title=\"自定义错误\"></a>自定义错误</h2><blockquote>\n<p>自定义错误类型</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tres, err := getArea(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ins, ok := err.(*AreaError); ok &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot; 半径是 &quot;</span>, ins.radius)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AreaError 定义错误结构体 </span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AreaError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmsg    <span class=\"type\">string</span></span><br><span class=\"line\">\tradius <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现 Error() 方法，即可实现 error 接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *AreaError)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;error: 半径：%.2f, 错误信息为：%s&quot;</span>, e.radius, e.msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算半径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getArea</span><span class=\"params\">(radius <span class=\"type\">float64</span>)</span></span> (<span class=\"type\">float64</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> radius &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, &amp;AreaError&#123;<span class=\"string\">&quot; 半径非法！&quot;</span>, radius&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Pi * radius * radius, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"defer 异常捕获机制\"><a href=\"#defer 异常捕获机制\" class=\"headerlink\" title=\"defer 异常捕获机制\"></a>defer 异常捕获机制</h2><blockquote>\n<p>输出结果为：2 B d c b a E C 触发异常 1 D A 4 3 1</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 手动定义 defer 函数内容并当场调用，匿名函数的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"number\">1</span>) &#125;()</span><br><span class=\"line\">    fmt.Println(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"number\">3</span>) &#125;()</span><br><span class=\"line\">    defer_call1()</span><br><span class=\"line\">\t<span class=\"comment\">// 后续可以可以被执行</span></span><br><span class=\"line\">    fmt.Println(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">defer_call1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">&quot;A&quot;</span>) &#125;()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 异常已经被捕获处理</span></span><br><span class=\"line\">        err := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            fmt.Println(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">&quot;E&quot;</span>) &#125;()</span><br><span class=\"line\">    defer_call2()</span><br><span class=\"line\">\t<span class=\"comment\">// 由于 defer_call2 已经抛出了异常，所以 F 无法被打印，程序直接进入预终止阶段，执行 defer 函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// defer 函数执行完毕之后就直接返回到上一层的调用方，也不会继续执行打印 F 的语句</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;F&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">defer_call2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">&quot;a&quot;</span>) &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">&quot;b&quot;</span>) &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">&quot;c&quot;</span>) &#125;()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;d&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 手动抛出异常</span></span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">&quot; 触发异常 1&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 后续代码不会继续执行</span></span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">&quot; 触发异常 2&quot;</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;e&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Error 和异常 Panic 的使用场景\"><a href=\"#Error 和异常 Panic 的使用场景\" class=\"headerlink\" title=\"Error 和异常 Panic 的使用场景\"></a>Error 和异常 Panic 的使用场景</h2><blockquote>\n<p>Panic 异常场景：意料之外，不应该出的问题, 比如空指针异常，下标溢出等异常</p>\n<ul>\n<li>空指针引用</li>\n<li>下标越界</li>\n<li>除数为 0</li>\n<li>switch 中出现不应该出现的 case 或者 default</li>\n<li>断言失败</li>\n<li>死锁</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Error 的处理场景：意料之内，可能出的问题, 比如网络连接超时，json 解析错误等</p>\n<ul>\n<li>函数返回错误，比如说打开文件可能出错</li>\n</ul>\n</blockquote>\n","url":"/posts/42803/","min2read":31,"word4post":"6.7k","prev_post":{"title":"Golang-Improve","url":"/posts/57803/"},"next_post":{"title":"Golang-qucikStart","url":"/posts/34244/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"类型区分\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">类型区分 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"值类型传递\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\"> 值类型传递</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"引用类型传递\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">引用类型传递</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"变量与常量\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">变量与常量 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"变量\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\"> 变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"常量\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">常量</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"运算\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">运算 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"按位运算\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\"> 按位运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"运算符优先级（从上到下）\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\">运算符优先级（从上到下）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"输入输出\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">输入输出 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"占位符\" href = \"#\"><span class=\"toc-number\">4.1.</span> <span class=\"toc-text\"> 占位符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"输入输出样式\" href = \"#\"><span class=\"toc-number\">4.2.</span> <span class=\"toc-text\"> 输入输出样式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"逻辑语句\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">逻辑语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"IF 语句\" href = \"#\"><span class=\"toc-number\">5.1.</span> <span class=\"toc-text\">IF 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"switch 语句\" href = \"#\"><span class=\"toc-number\">5.2.</span> <span class=\"toc-text\">switch 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"循环语句\" href = \"#\"><span class=\"toc-number\">5.3.</span> <span class=\"toc-text\">循环语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"for 循环\" href = \"#\"><span class=\"toc-number\">5.3.1.</span> <span class=\"toc-text\">for 循环</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"跳转语句\" href = \"#\"><span class=\"toc-number\">5.4.</span> <span class=\"toc-text\">跳转语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"goto 语句\" href = \"#\"><span class=\"toc-number\">5.4.1.</span> <span class=\"toc-text\">goto 语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"随机数\" href = \"#\"><span class=\"toc-number\">5.5.</span> <span class=\"toc-text\">随机数 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"时间戳\" href = \"#\"><span class=\"toc-number\">5.5.1.</span> <span class=\"toc-text\"> 时间戳</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"生成随机数\" href = \"#\"><span class=\"toc-number\">5.5.2.</span> <span class=\"toc-text\">生成随机数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"复合类型\" href = \"#\"><span class=\"toc-number\">6.</span> <span class=\"toc-text\">复合类型 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"数组\" href = \"#\"><span class=\"toc-number\">6.1.</span> <span class=\"toc-text\"> 数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"切片\" href = \"#\"><span class=\"toc-number\">6.2.</span> <span class=\"toc-text\">切片</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Map 集合\" href = \"#\"><span class=\"toc-number\">6.3.</span> <span class=\"toc-text\">Map 集合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"字符串\" href = \"#\"><span class=\"toc-number\">6.4.</span> <span class=\"toc-text\">字符串 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"字符串的定义\" href = \"#\"><span class=\"toc-number\">6.4.1.</span> <span class=\"toc-text\"> 字符串的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"字符串包的使用\" href = \"#\"><span class=\"toc-number\">6.4.2.</span> <span class=\"toc-text\">字符串包的使用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"函数\" href = \"#\"><span class=\"toc-number\">7.</span> <span class=\"toc-text\">函数 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"函数的定义与使用\" href = \"#\"><span class=\"toc-number\">7.1.</span> <span class=\"toc-text\"> 函数的定义与使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"defer 函数的使用\" href = \"#\"><span class=\"toc-number\">7.2.</span> <span class=\"toc-text\">defer 函数的使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"高级函数的使用\" href = \"#\"><span class=\"toc-number\">7.3.</span> <span class=\"toc-text\">高级函数的使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"指针\" href = \"#\"><span class=\"toc-number\">8.</span> <span class=\"toc-text\">指针 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"变量指针\" href = \"#\"><span class=\"toc-number\">8.1.</span> <span class=\"toc-text\"> 变量指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"数组指针\" href = \"#\"><span class=\"toc-number\">8.2.</span> <span class=\"toc-text\">数组指针</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"结构体\" href = \"#\"><span class=\"toc-number\">9.</span> <span class=\"toc-text\">结构体 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"结构体初识\" href = \"#\"><span class=\"toc-number\">9.1.</span> <span class=\"toc-text\"> 结构体初识</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"结构体的深入浅出\" href = \"#\"><span class=\"toc-number\">9.2.</span> <span class=\"toc-text\">结构体的深入浅出</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"接口\" href = \"#\"><span class=\"toc-number\">10.</span> <span class=\"toc-text\">接口 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"接口初识\" href = \"#\"><span class=\"toc-number\">10.1.</span> <span class=\"toc-text\"> 接口初识</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"接口的应用\" href = \"#\"><span class=\"toc-number\">10.2.</span> <span class=\"toc-text\">接口的应用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Type 的使用\" href = \"#\"><span class=\"toc-number\">11.</span> <span class=\"toc-text\">Type 的使用 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义类型\" href = \"#\"><span class=\"toc-number\">11.1.</span> <span class=\"toc-text\"> 自定义类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义函数类型\" href = \"#\"><span class=\"toc-number\">11.2.</span> <span class=\"toc-text\">自定义函数类型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Error 的使用\" href = \"#\"><span class=\"toc-number\">12.</span> <span class=\"toc-text\">Error 的使用 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"初识 Error\" href = \"#\"><span class=\"toc-number\">12.1.</span> <span class=\"toc-text\"> 初识 Error</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"查看错误的详细信息\" href = \"#\"><span class=\"toc-number\">12.2.</span> <span class=\"toc-text\">查看错误的详细信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"自定义错误\" href = \"#\"><span class=\"toc-number\">12.3.</span> <span class=\"toc-text\">自定义错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"defer 异常捕获机制\" href = \"#\"><span class=\"toc-number\">12.4.</span> <span class=\"toc-text\">defer 异常捕获机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Error 和异常 Panic 的使用场景\" href = \"#\"><span class=\"toc-number\">12.5.</span> <span class=\"toc-text\">Error 和异常 Panic 的使用场景</span></a></li></ol></li></ol>","categories":[{"name":"Golang","path":"api/categories/Golang.json","url":"/categories/Golang/"}],"tags":[{"name":"Golang","path":"api/tags/Golang.json","url":"/tags/Golang/"}]}