{"title":"boot-Security-module","slug":"boot-Security-module","date":"2023-10-13","updated":"2023-10-13","comments":true,"path":"api/posts/37425.json","excerpt":"<blockquote><p>SpringSecurity 的组件集合 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>SpringSecurity 的组件集合 </p>\n</blockquote>\n<span id=\"more\"></span>\n<ul>\n<li>Authentication：表示用户的身份认证信息，包括用户名、密码、权限等信息。</li>\n<li>AuthenticationManager：用于对用户的身份认证进行管理，包括对用户身份进行认证、验证用户的身份信息等。</li>\n<li>AccessDecisionManager：用于进行访问决策管理，根据用户的身份信息和访问控制信息，判断用户是否有权限访问该资源。</li>\n<li>FilterSecurityInterceptor：用于在请求被处理之前进行安全拦截，根据访问控制信息判断用户是否有权限访问该资源。</li>\n<li>AuthenticationEntryPoint：用于处理未经身份认证的用户访问受保护的资源时的操作，如重定向到登录页面等。</li>\n<li>AccessDeniedHandler：用于处理用户没有访问权限时的操作，如重定向到错误页面等。</li>\n<li>AbstractSecurityInterceptor：用于对请求进行拦截和处理，是 FilterSecurityInterceptor 的父类。</li>\n<li>AuthenticationProvider：用于对用户的身份进行认证，与 AuthenticationManager 类似，但可以实现多种认证方式，如用户名密码认证、LDAP 认证等。</li>\n<li>UserDetailsService：用于在认证过程中根据用户名加载用户信息，包括用户名、密码、权限等信息。</li>\n<li>UserDetails：用于存储用户的详细信息，包括用户名、密码、权限等信息。通常由 UserDetailsService 返回，作为 Authentication 对象的一部分。</li>\n<li>RememberMeServices：用于处理“记住我”功能，当用户勾选“记住我”选项时，该服务将生成一个记住令牌并存储在用户的浏览器中，以便在下次访问该应用程序时自动登录。</li>\n<li>RememberMeAuthenticationToken：用于在用户登录时，通过“记住我”功能，在用户下次访问该应用程序时，可以直接使用该令牌来自动登录。</li>\n<li>HttpSessionRequestCache：用于将当前请求缓存到 HttpSession 中，以便在用户登录成功后，从缓存中获取原始请求并重定向。</li>\n<li>SecurityContextHolder：用于存储当前用户的身份信息，以便在应用程序的任何地方都可以访问用户的身份信息。</li>\n<li>SessionRegistry：用于管理应用程序中所有用户的会话信息，包括会话 ID、用户名等信息，以便在用户注销或超时时进行清理。</li>\n<li>CsrfFilter：用于防止 CSRF 攻击，在请求中添加随机生成的 token，并在处理请求时验证该 token。</li>\n<li>CsrfTokenRepository：用于存储 CSRF 令牌并验证 CSRF 攻击。</li>\n<li>CsrfToken：用于表示 CSRF 令牌，包括令牌的值、过期时间等信息。</li>\n<li>HttpSecurity：用于配置应用程序的安全策略，包括访问控制、认证方式、CSRF 防护等。</li>\n<li>WebSecurityConfigurerAdapter：用于配置应用程序的安全策略，可以通过继承该类并重写其中的方法，来实现自定义的安全策略。</li>\n<li>UserDetailsPasswordService：用于在用户修改密码时，更新用户的密码信息。</li>\n<li>PasswordEncoder：用于加密用户的密码，保证用户密码的安全性。</li>\n<li>GrantedAuthority：用于表示用户的权限信息。</li>\n<li>SecurityExpressionRoot：用于解析 Spring Security 中的表达式，以便在访问控制中使用。</li>\n<li>SecurityMetadataSource：用于从应用程序中的配置信息中获取访问控制信息，包括 URL、角色等信息。</li>\n<li>FilterInvocationSecurityMetadataSource：用于从应用程序中的配置信息中获取访问控制信息，并与请求的 URL 进行匹配，以确定是否允许访问该资源。 这些组件共同构成了 Spring Security 的框架，通过它们的协作，可以实现对应用程序的安全保护。</li>\n</ul>\n","url":"/posts/37425/","min2read":3,"word4post":882,"prev_post":{"title":"AC-cron","url":"/posts/45793/"},"next_post":{"title":"Recruitment-C-1-1","url":"/posts/10694/"},"toc":"","categories":[{"name":"SpringSecurity","path":"api/categories/SpringSecurity.json","url":"/categories/SpringSecurity/"}],"tags":[]}