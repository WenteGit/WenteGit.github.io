{"title":"JavaStream","slug":"JavaStream","date":"2023-02-27","updated":"2023-12-09","comments":true,"path":"api/posts/44747.json","excerpt":"<blockquote><p> 总结了关于 Java 的 Stream 流的相关内容 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p> 总结了关于 Java 的 Stream 流的相关内容 </p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"中间操作\"><a href=\"# 中间操作\" class=\"headerlink\" title=\"中间操作\"></a> 中间操作 </h1><ol>\n<li> 过滤 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">List&lt;Integer&gt; collect = list.stream().filter(i -&gt; i % <span class=\"number\">2</span> == <span class=\"number\">0</span>).collect(Collectors.toList());  <span class=\"comment\">//[2, 4]</span></span><br></pre></td></tr></table></figure></li>\n<li> 映射 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;peach&quot;</span>);</span><br><span class=\"line\">List&lt;String&gt; collect = list.stream().map(s -&gt; s.toUpperCase()).collect(Collectors.toList());  <span class=\"comment\">//[APPLE, BANANA, PEACH]</span></span><br></pre></td></tr></table></figure></li>\n<li> 从小到大排序 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">List&lt;Integer&gt; collect = list.stream().sorted().collect(Collectors.toList());  <span class=\"comment\">//[1, 1, 2, 3, 4, 5, 5, 6, 9]</span></span><br></pre></td></tr></table></figure></li>\n<li> 转换成数组 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将流中的元素转换为数组 </span></span><br><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">Integer[] result = list.stream().toArray(Integer[]::<span class=\"keyword\">new</span>);   </span><br><span class=\"line\">System.out.print(Arrays.toString(result));   <span class=\"comment\">//[1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"终止操作\"><a href=\"# 终止操作\" class=\"headerlink\" title=\"终止操作\"></a> 终止操作 </h1><ol>\n<li><p>forEach</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;peach&quot;</span>);</span><br><span class=\"line\">list.stream().forEach(System.out::println);  <span class=\"comment\">//apple banana peach</span></span><br></pre></td></tr></table></figure></li>\n<li><p>reduce</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> list.stream().reduce(<span class=\"number\">0</span>,(a,b)-&gt;a+b);  <span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></li>\n<li><p>collect</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;peach&quot;</span>);</span><br><span class=\"line\">List&lt;String&gt; newList = list.stream().filter(s -&gt; s.startsWith(<span class=\"string\">&quot;a&quot;</span>)).collect(Collectors.toList());  <span class=\"comment\">//[apple]</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"findFirst- 和 -findAny\"><a href=\"#findFirst- 和 -findAny\" class=\"headerlink\" title=\"findFirst 和 findAny\"></a>findFirst 和 findAny</h1><ol>\n<li><p>findFirst：返回流中的第一个元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; optional = list.stream().findFirst();   <span class=\"comment\">// Optional[1]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>findAny：返回流中任意一个元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">Optional&lt;Integer&gt; optional = list.stream().filter(i -&gt; i &gt;= <span class=\"number\">3</span>).findAny();   <span class=\"comment\">// Optional[3] 或 Optional[4] 或 Optional[5]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"anyMatch、allMatch- 和 -noneMatch\"><a href=\"#anyMatch、allMatch- 和 -noneMatch\" class=\"headerlink\" title=\"anyMatch、allMatch 和 noneMatch\"></a>anyMatch、allMatch 和 noneMatch</h1></li>\n<li><p>anyMatch：判断流中是否存在至少一个元素满足指定条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> list.stream().anyMatch(i -&gt; i &gt; <span class=\"number\">3</span>);   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>allMatch：判断流中是否所有元素都满足指定条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> list.stream().allMatch(i -&gt; i &gt; <span class=\"number\">0</span>);   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>noneMatch：判断流中是否不存在满足指定条件的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> list.stream().noneMatch(i -&gt; i &lt; <span class=\"number\">0</span>);   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"flatMap：可以将多个流合并成一个流，并去重。\"><a href=\"#flatMap：可以将多个流合并成一个流，并去重。\" class=\"headerlink\" title=\"flatMap：可以将多个流合并成一个流，并去重。\"></a>flatMap：可以将多个流合并成一个流，并去重。</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; list = Arrays.asList(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>), Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">4</span>), Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">List&lt;Integer&gt; result = list.stream().flatMap(Collection::stream).distinct().collect(Collectors.toList());   <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分组\"><a href=\"# 分组\" class=\"headerlink\" title=\"分组\"></a> 分组 </h1><ol>\n<li><p>groupingBy：将流中的元素按照指定条件分组 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将流中的元素按照字符串长度分组。</span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;cherry&quot;</span>, <span class=\"string\">&quot;pear&quot;</span>);</span><br><span class=\"line\">Map&lt;Integer, List&lt;String&gt;&gt; result1 = list.stream().collect(Collectors.groupingBy(String::length));   <span class=\"comment\">// &#123;5=[apple, pear], 6=[banana, cherry]&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 按照自定义的条件进行分组，这里是按首字母分组 </span></span><br><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; result2 = list.stream().collect(Collectors.groupingBy(s -&gt; s.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));   <span class=\"comment\">// &#123;a=[apple], b=[banana], c=[cherry], p=[pear]&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>partitioningBy：将流中的元素按照指定条件分成 true 和 false 两组 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将流中的元素按照指定条件分成 true 和 false 两组 </span></span><br><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">Map&lt;Boolean, List&lt;Integer&gt;&gt; result = list.stream().collect(Collectors.partitioningBy(x -&gt; x &gt; <span class=\"number\">3</span>));   <span class=\"comment\">// &#123;false=[1, 2, 3], true=[4, 5]&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 将结果转换为 Set 类型，并取为 true 的数据 </span></span><br><span class=\"line\">Set&lt;Integer&gt; result2 = list.stream().collect(Collectors.partitioningBy(x -&gt; x &gt; <span class=\"number\">3</span>, Collectors.toSet())).get(<span class=\"literal\">true</span>);   <span class=\"comment\">// [4, 5]</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"将 List 变为 Map\"><a href=\"# 将 List 变为 Map\" class=\"headerlink\" title=\"将 List 变为 Map\"></a> 将 List 变为 Map</h1><ol>\n<li>Collectors.toMap<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询岗位 Id 和 Name 的映射 </span></span><br><span class=\"line\">     List&lt;Station&gt; stationList = stationPlusService.list();</span><br><span class=\"line\">     Map&lt;Long, String&gt; idNameMap = stationList.stream().collect(Collectors.toMap(Station::getId, Station::getStationName));</span><br></pre></td></tr></table></figure></li>\n</ol>\n","url":"/posts/44747/","min2read":4,"word4post":819,"prev_post":{"title":"BigData-Hadoop","url":"/posts/30565/"},"next_post":{"title":"WebS- 接单平台","url":"/posts/13929/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"中间操作\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\"> 中间操作 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"终止操作\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\"> 终止操作 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"findFirst- 和 -findAny\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">findFirst 和 findAny</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"anyMatch、allMatch- 和 -noneMatch\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">anyMatch、allMatch 和 noneMatch</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"flatMap：可以将多个流合并成一个流，并去重。\" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\">flatMap：可以将多个流合并成一个流，并去重。</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"分组\" href = \"#\"><span class=\"toc-number\">6.</span> <span class=\"toc-text\"> 分组 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"将 List 变为 Map\" href = \"#\"><span class=\"toc-number\">7.</span> <span class=\"toc-text\"> 将 List 变为 Map</span></a></li></ol>","categories":[{"name":"JavaStudy","path":"api/categories/JavaStudy.json","url":"/categories/JavaStudy/"}],"tags":[]}