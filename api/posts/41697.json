{"title":"TechStack-InterfaceDefault","slug":"TechStack-InerfaceDefault","date":"2024-01-11","updated":"2024-01-11","comments":true,"path":"api/posts/41697.json","excerpt":"<blockquote><p> 接口的默认方法解析 </p></blockquote>","cover":null,"covers":null,"content":"<blockquote>\n<p>接口的默认方法解析</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"结论\"><a href=\"# 结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><blockquote>\n<ul>\n<li>接口中可以用 default 修饰方法，该方法可以写方法体，作为接口的默认方法</li>\n<li>接口中的默认方法的权限范围和 public 相同，且重写后的方法的修饰符就是 public</li>\n<li>当实现类同时继承了其他类，并且实现了接口，而其他类的方法和接口的默认方法都存在的时候，会优先执行于被继承的类的方法</li>\n<li>当实现类同时实现了两个接口，且两个接口有同名的默认方法，则实现类必须重写该方法，可以自定义新的逻辑，也可以复用两个接口中其中一个接口的逻辑</li>\n</ul>\n</blockquote>\n<h1 id=\"代码\"><a href=\"# 代码\" class=\"headerlink\" title=\"代码\"></a>代码 </h1><h2 id=\"接口中的默认方法\"><a href=\"# 接口中的默认方法\" class=\"headerlink\" title=\"接口中的默认方法\"></a> 接口中的默认方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; 接口根实现 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现类的重写方法\"><a href=\"# 实现类的重写方法\" class=\"headerlink\" title=\"实现类的重写方法\"></a>实现类的重写方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CatOne</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Cat.<span class=\"built_in\">super</span>.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类优先于接口\"><a href=\"# 类优先于接口\" class=\"headerlink\" title=\"类优先于接口\"></a>类优先于接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyImplement2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MyImplement</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface2</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyImplement2</span> <span class=\"variable\">myImplement2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyImplement2</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 输出 MyImplement 类中所定义的逻辑</span></span><br><span class=\"line\">        myImplement2.helloWorld();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多接口同名默认方法\"><a href=\"# 多接口同名默认方法\" class=\"headerlink\" title=\"多接口同名默认方法\"></a>多接口同名默认方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyImplement</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface1</span>,Interface2&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyImplement</span> <span class=\"variable\">myImplement</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyImplement</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 输出为子类的重写后的逻辑</span></span><br><span class=\"line\">        myImplement.helloWorld();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">helloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 复用接口 1 的逻辑，也可以重写逻辑</span></span><br><span class=\"line\">        Interface1.<span class=\"built_in\">super</span>.helloWorld();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","url":"/posts/41697/","min2read":1,"word4post":351,"prev_post":null,"next_post":{"title":"TechStack-ASynchronization","url":"/posts/42352/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"结论\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">结论</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"代码\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">代码 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"接口中的默认方法\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\"> 接口中的默认方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"实现类的重写方法\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">实现类的重写方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"类优先于接口\" href = \"#\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">类优先于接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"多接口同名默认方法\" href = \"#\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">多接口同名默认方法</span></a></li></ol></li></ol>","categories":[{"name":"TechStack","path":"api/categories/TechStack.json","url":"/categories/TechStack/"}],"tags":[]}